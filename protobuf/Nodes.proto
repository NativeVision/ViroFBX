syntax = "proto3";
package viro;

option optimize_for = LITE_RUNTIME;

message Node {

    message Matrix {
        repeated float value = 1;
    }

    string name = 1;

    repeated float position = 2;
    repeated float scale = 3;
    repeated float rotation = 4;

    int32 rendering_order = 5;
    float opacity = 6;

    message Geometry {
        string name = 1;

        message Source {
            enum Semantic {
                Vertex = 0;
                Normal = 1;
                Color = 2;
                Texcoord = 3;
                Tangent = 4;
                VertexCrease = 5;
                EdgeCrease = 6;
                BoneWeights = 7;
                BoneIndices = 8;
            }

            Semantic semantic = 1;
            uint32 vertex_count = 2;
            bool float_components = 3;
            uint32 components_per_vertex = 4;
            uint32 bytes_per_component = 5;
            uint32 data_offset = 6;
            uint32 data_stride = 7;

            // If not provided, will assume this source uses Geometry.data
            bytes data = 8;
        }

        bytes data = 2;
        repeated Source source = 3;

        message Element {
            enum Primitive {
                Triangle = 0;
                TriangleStrip = 1;
                Line = 2;
                Point = 3;
            }

            bytes data = 1;
            Primitive primitive = 2;
            uint32 primitive_count = 3;
            uint32 bytes_per_index = 4;
        }
        repeated Element element = 4;

        message Material {
            string name = 1;
            float shininess = 2;
            float fresnel_exponent = 3;
            float transparency = 4;

            enum LightingModel {
                Constant = 0;
                Lambert = 1;
                Blinn = 2;
                Phong = 3;
		        PhysicallyBased = 4;
            }
            LightingModel lighting_model = 5;

            bool lit_per_pixel = 6;

            enum CullMode {
                Back = 0;
                Front = 1;
                None = 2;
            }
            CullMode cull_mode = 7;

            enum BlendMode {
                Alpha = 0;
                Add = 1;
                Subtract = 2;
                Multiply = 3;
                Screen = 4;
                Replace = 5;
            }
            BlendMode blend_mode = 8;

            bool reads_from_depth_buffer = 9;
            bool writes_to_depth_buffer = 10;

            message Visual {
                repeated float color = 1;
                string texture = 2;
                float intensity = 3;
                repeated float transform = 4;

                enum WrapMode {
                    Clamp = 0;
                    Repeat = 1;
                    ClampToBorder = 2;
                    Mirror = 3;
                }
                WrapMode wrap_mode_s = 5;
                WrapMode wrap_mode_t = 6;

                enum FilterMode {
                    None = 0;
                    Nearest = 1;
                    Linear = 2;
                }
                FilterMode minification_filter = 7;
                FilterMode magnification_filter = 8;
                FilterMode mip_filter = 9;
            }
            Visual diffuse = 11;
            Visual specular = 12;
            Visual normal = 13;
            Visual reflective = 14;
            Visual emission = 15;
            Visual multiply = 16;
	        Visual roughness = 17;
            Visual metalness = 18;
            Visual ao = 19;
        }
        repeated Material material = 5;

        message Skin {
            Matrix geometry_bind_transform = 1;
            repeated Matrix bind_transform = 2;
            Source bone_indices = 3;
            Source bone_weights = 4;
        }
        Skin skin = 6;
    }
    Geometry geometry = 7;

    message Skeleton {
        message Bone {
            string name = 1;
            int32 parent_index = 2;
            Matrix local_transform = 3;
            Matrix bind_transform = 4;
        }
        repeated Bone bone = 1;
    }
    Skeleton skeleton = 8;

    message SkeletalAnimation {
        message Frame {
            // Time ranges from 0 to 1, indicates fraction of duration
            float time = 1;
            repeated int32 bone_index = 2;
            repeated Matrix transform = 3;
            repeated Matrix local_transform = 4;
        }

        string name = 1;
        repeated Frame frame = 2;
        int64 duration = 3;
        bool has_scaling = 4;
    }
    repeated SkeletalAnimation skeletal_animation = 9;

    message KeyframeAnimation {
        message Frame {
            // Time ranges from 0 to 1, indicates fraction of duration
            float time = 1;

            // Each frame may contain one or more of these
            repeated float translation = 2;
            repeated float rotation = 3;
            repeated float scale = 4;
        }

        string name = 1;
        repeated Frame frame = 2;
        int64 duration = 3;
    }
    repeated KeyframeAnimation keyframe_animation = 10;

    message Light {
        string name = 1;

        enum LightType {
            Ambient = 0;
            Directional = 1;
            Omni = 2;
            Spot = 3;
        }
        LightType light_type = 2;

        repeated float color = 3;
        repeated float position = 4;
        repeated float direction = 5;

        float intensity = 6;
        float temperature = 7;

        float attenuation_start = 8;
        float attenuation_end = 9;
        float attenuation_falloff_exponent = 10;

        float spot_inner_angle = 11;
        float spot_outer_angle = 12;
    }
    repeated Light light = 11;

    message Camera {
        repeated float position = 1;
    }
    Camera camera = 12;

    repeated Node subnode = 13;
}
