// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nodes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Nodes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace viro {
class Node_Geometry_SourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Geometry_Source> {
} _Node_Geometry_Source_default_instance_;
class Node_Geometry_ElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Geometry_Element> {
} _Node_Geometry_Element_default_instance_;
class Node_Geometry_Material_VisualDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Geometry_Material_Visual> {
} _Node_Geometry_Material_Visual_default_instance_;
class Node_Geometry_MaterialDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Geometry_Material> {
} _Node_Geometry_Material_default_instance_;
class Node_GeometryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Geometry> {
} _Node_Geometry_default_instance_;
class Node_LightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Light> {
} _Node_Light_default_instance_;
class Node_CameraDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node_Camera> {
} _Node_Camera_default_instance_;
class NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node> {
} _Node_default_instance_;

namespace protobuf_Nodes_2eproto {


void TableStruct::Shutdown() {
  _Node_Geometry_Source_default_instance_.Shutdown();
  _Node_Geometry_Element_default_instance_.Shutdown();
  _Node_Geometry_Material_Visual_default_instance_.Shutdown();
  _Node_Geometry_Material_default_instance_.Shutdown();
  _Node_Geometry_default_instance_.Shutdown();
  _Node_Light_default_instance_.Shutdown();
  _Node_Camera_default_instance_.Shutdown();
  _Node_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Node_Geometry_Source_default_instance_.DefaultConstruct();
  _Node_Geometry_Element_default_instance_.DefaultConstruct();
  _Node_Geometry_Material_Visual_default_instance_.DefaultConstruct();
  _Node_Geometry_Material_default_instance_.DefaultConstruct();
  _Node_Geometry_default_instance_.DefaultConstruct();
  _Node_Light_default_instance_.DefaultConstruct();
  _Node_Camera_default_instance_.DefaultConstruct();
  _Node_default_instance_.DefaultConstruct();
  _Node_Geometry_Material_default_instance_.get_mutable()->diffuse_ = const_cast< ::viro::Node_Geometry_Material_Visual*>(
      ::viro::Node_Geometry_Material_Visual::internal_default_instance());
  _Node_Geometry_Material_default_instance_.get_mutable()->specular_ = const_cast< ::viro::Node_Geometry_Material_Visual*>(
      ::viro::Node_Geometry_Material_Visual::internal_default_instance());
  _Node_Geometry_Material_default_instance_.get_mutable()->normal_ = const_cast< ::viro::Node_Geometry_Material_Visual*>(
      ::viro::Node_Geometry_Material_Visual::internal_default_instance());
  _Node_Geometry_Material_default_instance_.get_mutable()->reflective_ = const_cast< ::viro::Node_Geometry_Material_Visual*>(
      ::viro::Node_Geometry_Material_Visual::internal_default_instance());
  _Node_Geometry_Material_default_instance_.get_mutable()->emission_ = const_cast< ::viro::Node_Geometry_Material_Visual*>(
      ::viro::Node_Geometry_Material_Visual::internal_default_instance());
  _Node_Geometry_Material_default_instance_.get_mutable()->multiply_ = const_cast< ::viro::Node_Geometry_Material_Visual*>(
      ::viro::Node_Geometry_Material_Visual::internal_default_instance());
  _Node_default_instance_.get_mutable()->geometry_ = const_cast< ::viro::Node_Geometry*>(
      ::viro::Node_Geometry::internal_default_instance());
  _Node_default_instance_.get_mutable()->camera_ = const_cast< ::viro::Node_Camera*>(
      ::viro::Node_Camera::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_Nodes_2eproto

bool Node_Geometry_Source_Semantic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Source_Semantic Node_Geometry_Source::Vertex;
const Node_Geometry_Source_Semantic Node_Geometry_Source::Normal;
const Node_Geometry_Source_Semantic Node_Geometry_Source::Color;
const Node_Geometry_Source_Semantic Node_Geometry_Source::Texcoord;
const Node_Geometry_Source_Semantic Node_Geometry_Source::Tangent;
const Node_Geometry_Source_Semantic Node_Geometry_Source::VertexCrease;
const Node_Geometry_Source_Semantic Node_Geometry_Source::EdgeCrease;
const Node_Geometry_Source_Semantic Node_Geometry_Source::BoneWeights;
const Node_Geometry_Source_Semantic Node_Geometry_Source::BoneIndices;
const Node_Geometry_Source_Semantic Node_Geometry_Source::Semantic_MIN;
const Node_Geometry_Source_Semantic Node_Geometry_Source::Semantic_MAX;
const int Node_Geometry_Source::Semantic_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Geometry_Element_Primitive_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Element_Primitive Node_Geometry_Element::Triangle;
const Node_Geometry_Element_Primitive Node_Geometry_Element::TriangleStrip;
const Node_Geometry_Element_Primitive Node_Geometry_Element::Line;
const Node_Geometry_Element_Primitive Node_Geometry_Element::Point;
const Node_Geometry_Element_Primitive Node_Geometry_Element::Primitive_MIN;
const Node_Geometry_Element_Primitive Node_Geometry_Element::Primitive_MAX;
const int Node_Geometry_Element::Primitive_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Geometry_Material_Visual_WrapMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::Clamp;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::Repeat;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::ClampToBorder;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::Mirror;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::WrapMode_MIN;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::WrapMode_MAX;
const int Node_Geometry_Material_Visual::WrapMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Geometry_Material_Visual_FilterMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::None;
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::Nearest;
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::Linear;
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::FilterMode_MIN;
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::FilterMode_MAX;
const int Node_Geometry_Material_Visual::FilterMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Geometry_Material_LightingModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Material_LightingModel Node_Geometry_Material::Constant;
const Node_Geometry_Material_LightingModel Node_Geometry_Material::Lambert;
const Node_Geometry_Material_LightingModel Node_Geometry_Material::Blinn;
const Node_Geometry_Material_LightingModel Node_Geometry_Material::Phong;
const Node_Geometry_Material_LightingModel Node_Geometry_Material::LightingModel_MIN;
const Node_Geometry_Material_LightingModel Node_Geometry_Material::LightingModel_MAX;
const int Node_Geometry_Material::LightingModel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Geometry_Material_CullMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Material_CullMode Node_Geometry_Material::Back;
const Node_Geometry_Material_CullMode Node_Geometry_Material::Front;
const Node_Geometry_Material_CullMode Node_Geometry_Material::None;
const Node_Geometry_Material_CullMode Node_Geometry_Material::CullMode_MIN;
const Node_Geometry_Material_CullMode Node_Geometry_Material::CullMode_MAX;
const int Node_Geometry_Material::CullMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Geometry_Material_BlendMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Geometry_Material_BlendMode Node_Geometry_Material::Alpha;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::Add;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::Subtract;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::Multiply;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::Screen;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::Replace;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::BlendMode_MIN;
const Node_Geometry_Material_BlendMode Node_Geometry_Material::BlendMode_MAX;
const int Node_Geometry_Material::BlendMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Node_Light_LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Node_Light_LightType Node_Light::Ambient;
const Node_Light_LightType Node_Light::Directional;
const Node_Light_LightType Node_Light::Omni;
const Node_Light_LightType Node_Light::Spot;
const Node_Light_LightType Node_Light::LightType_MIN;
const Node_Light_LightType Node_Light::LightType_MAX;
const int Node_Light::LightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Geometry_Source::kSemanticFieldNumber;
const int Node_Geometry_Source::kVertexCountFieldNumber;
const int Node_Geometry_Source::kFloatComponentsFieldNumber;
const int Node_Geometry_Source::kComponentsPerVertexFieldNumber;
const int Node_Geometry_Source::kBytesPerComponentFieldNumber;
const int Node_Geometry_Source::kDataOffsetFieldNumber;
const int Node_Geometry_Source::kDataStrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Geometry_Source::Node_Geometry_Source()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Geometry.Source)
}
Node_Geometry_Source::Node_Geometry_Source(const Node_Geometry_Source& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&semantic_, &from.semantic_,
    reinterpret_cast<char*>(&data_stride_) -
    reinterpret_cast<char*>(&semantic_) + sizeof(data_stride_));
  // @@protoc_insertion_point(copy_constructor:viro.Node.Geometry.Source)
}

void Node_Geometry_Source::SharedCtor() {
  ::memset(&semantic_, 0, reinterpret_cast<char*>(&data_stride_) -
    reinterpret_cast<char*>(&semantic_) + sizeof(data_stride_));
  _cached_size_ = 0;
}

Node_Geometry_Source::~Node_Geometry_Source() {
  // @@protoc_insertion_point(destructor:viro.Node.Geometry.Source)
  SharedDtor();
}

void Node_Geometry_Source::SharedDtor() {
}

void Node_Geometry_Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Geometry_Source& Node_Geometry_Source::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Geometry_Source* Node_Geometry_Source::New(::google::protobuf::Arena* arena) const {
  Node_Geometry_Source* n = new Node_Geometry_Source;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Geometry_Source::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Geometry.Source)
  ::memset(&semantic_, 0, reinterpret_cast<char*>(&data_stride_) -
    reinterpret_cast<char*>(&semantic_) + sizeof(data_stride_));
}

bool Node_Geometry_Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Geometry.Source)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .viro.Node.Geometry.Source.Semantic semantic = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_semantic(static_cast< ::viro::Node_Geometry_Source_Semantic >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vertex_count = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertex_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool float_components = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &float_components_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 components_per_vertex = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &components_per_vertex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bytes_per_component = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_per_component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data_offset = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data_stride = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Geometry.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Geometry.Source)
  return false;
#undef DO_
}

void Node_Geometry_Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Geometry.Source)
  // .viro.Node.Geometry.Source.Semantic semantic = 1;
  if (this->semantic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->semantic(), output);
  }

  // uint32 vertex_count = 2;
  if (this->vertex_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vertex_count(), output);
  }

  // bool float_components = 3;
  if (this->float_components() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->float_components(), output);
  }

  // uint32 components_per_vertex = 4;
  if (this->components_per_vertex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->components_per_vertex(), output);
  }

  // uint32 bytes_per_component = 5;
  if (this->bytes_per_component() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bytes_per_component(), output);
  }

  // uint32 data_offset = 6;
  if (this->data_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->data_offset(), output);
  }

  // uint32 data_stride = 7;
  if (this->data_stride() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data_stride(), output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Geometry.Source)
}

size_t Node_Geometry_Source::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Geometry.Source)
  size_t total_size = 0;

  // .viro.Node.Geometry.Source.Semantic semantic = 1;
  if (this->semantic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->semantic());
  }

  // uint32 vertex_count = 2;
  if (this->vertex_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertex_count());
  }

  // bool float_components = 3;
  if (this->float_components() != 0) {
    total_size += 1 + 1;
  }

  // uint32 components_per_vertex = 4;
  if (this->components_per_vertex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->components_per_vertex());
  }

  // uint32 bytes_per_component = 5;
  if (this->bytes_per_component() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_per_component());
  }

  // uint32 data_offset = 6;
  if (this->data_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_offset());
  }

  // uint32 data_stride = 7;
  if (this->data_stride() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_stride());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Geometry_Source::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Geometry_Source*>(&from));
}

void Node_Geometry_Source::MergeFrom(const Node_Geometry_Source& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Geometry.Source)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.semantic() != 0) {
    set_semantic(from.semantic());
  }
  if (from.vertex_count() != 0) {
    set_vertex_count(from.vertex_count());
  }
  if (from.float_components() != 0) {
    set_float_components(from.float_components());
  }
  if (from.components_per_vertex() != 0) {
    set_components_per_vertex(from.components_per_vertex());
  }
  if (from.bytes_per_component() != 0) {
    set_bytes_per_component(from.bytes_per_component());
  }
  if (from.data_offset() != 0) {
    set_data_offset(from.data_offset());
  }
  if (from.data_stride() != 0) {
    set_data_stride(from.data_stride());
  }
}

void Node_Geometry_Source::CopyFrom(const Node_Geometry_Source& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Geometry.Source)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Geometry_Source::IsInitialized() const {
  return true;
}

void Node_Geometry_Source::Swap(Node_Geometry_Source* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Geometry_Source::InternalSwap(Node_Geometry_Source* other) {
  std::swap(semantic_, other->semantic_);
  std::swap(vertex_count_, other->vertex_count_);
  std::swap(float_components_, other->float_components_);
  std::swap(components_per_vertex_, other->components_per_vertex_);
  std::swap(bytes_per_component_, other->bytes_per_component_);
  std::swap(data_offset_, other->data_offset_);
  std::swap(data_stride_, other->data_stride_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Geometry_Source::GetTypeName() const {
  return "viro.Node.Geometry.Source";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Geometry_Source

// .viro.Node.Geometry.Source.Semantic semantic = 1;
void Node_Geometry_Source::clear_semantic() {
  semantic_ = 0;
}
::viro::Node_Geometry_Source_Semantic Node_Geometry_Source::semantic() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.semantic)
  return static_cast< ::viro::Node_Geometry_Source_Semantic >(semantic_);
}
void Node_Geometry_Source::set_semantic(::viro::Node_Geometry_Source_Semantic value) {
  
  semantic_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.semantic)
}

// uint32 vertex_count = 2;
void Node_Geometry_Source::clear_vertex_count() {
  vertex_count_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Source::vertex_count() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.vertex_count)
  return vertex_count_;
}
void Node_Geometry_Source::set_vertex_count(::google::protobuf::uint32 value) {
  
  vertex_count_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.vertex_count)
}

// bool float_components = 3;
void Node_Geometry_Source::clear_float_components() {
  float_components_ = false;
}
bool Node_Geometry_Source::float_components() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.float_components)
  return float_components_;
}
void Node_Geometry_Source::set_float_components(bool value) {
  
  float_components_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.float_components)
}

// uint32 components_per_vertex = 4;
void Node_Geometry_Source::clear_components_per_vertex() {
  components_per_vertex_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Source::components_per_vertex() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.components_per_vertex)
  return components_per_vertex_;
}
void Node_Geometry_Source::set_components_per_vertex(::google::protobuf::uint32 value) {
  
  components_per_vertex_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.components_per_vertex)
}

// uint32 bytes_per_component = 5;
void Node_Geometry_Source::clear_bytes_per_component() {
  bytes_per_component_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Source::bytes_per_component() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.bytes_per_component)
  return bytes_per_component_;
}
void Node_Geometry_Source::set_bytes_per_component(::google::protobuf::uint32 value) {
  
  bytes_per_component_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.bytes_per_component)
}

// uint32 data_offset = 6;
void Node_Geometry_Source::clear_data_offset() {
  data_offset_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Source::data_offset() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data_offset)
  return data_offset_;
}
void Node_Geometry_Source::set_data_offset(::google::protobuf::uint32 value) {
  
  data_offset_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data_offset)
}

// uint32 data_stride = 7;
void Node_Geometry_Source::clear_data_stride() {
  data_stride_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Source::data_stride() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data_stride)
  return data_stride_;
}
void Node_Geometry_Source::set_data_stride(::google::protobuf::uint32 value) {
  
  data_stride_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data_stride)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Geometry_Element::kDataFieldNumber;
const int Node_Geometry_Element::kPrimitiveFieldNumber;
const int Node_Geometry_Element::kPrimitiveCountFieldNumber;
const int Node_Geometry_Element::kBytesPerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Geometry_Element::Node_Geometry_Element()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Geometry.Element)
}
Node_Geometry_Element::Node_Geometry_Element(const Node_Geometry_Element& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&primitive_, &from.primitive_,
    reinterpret_cast<char*>(&bytes_per_index_) -
    reinterpret_cast<char*>(&primitive_) + sizeof(bytes_per_index_));
  // @@protoc_insertion_point(copy_constructor:viro.Node.Geometry.Element)
}

void Node_Geometry_Element::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&primitive_, 0, reinterpret_cast<char*>(&bytes_per_index_) -
    reinterpret_cast<char*>(&primitive_) + sizeof(bytes_per_index_));
  _cached_size_ = 0;
}

Node_Geometry_Element::~Node_Geometry_Element() {
  // @@protoc_insertion_point(destructor:viro.Node.Geometry.Element)
  SharedDtor();
}

void Node_Geometry_Element::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node_Geometry_Element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Geometry_Element& Node_Geometry_Element::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Geometry_Element* Node_Geometry_Element::New(::google::protobuf::Arena* arena) const {
  Node_Geometry_Element* n = new Node_Geometry_Element;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Geometry_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Geometry.Element)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&primitive_, 0, reinterpret_cast<char*>(&bytes_per_index_) -
    reinterpret_cast<char*>(&primitive_) + sizeof(bytes_per_index_));
}

bool Node_Geometry_Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Geometry.Element)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Element.Primitive primitive = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_primitive(static_cast< ::viro::Node_Geometry_Element_Primitive >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 primitive_count = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primitive_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bytes_per_index = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_per_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Geometry.Element)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Geometry.Element)
  return false;
#undef DO_
}

void Node_Geometry_Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Geometry.Element)
  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // .viro.Node.Geometry.Element.Primitive primitive = 2;
  if (this->primitive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->primitive(), output);
  }

  // uint32 primitive_count = 3;
  if (this->primitive_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->primitive_count(), output);
  }

  // uint32 bytes_per_index = 4;
  if (this->bytes_per_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bytes_per_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Geometry.Element)
}

size_t Node_Geometry_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Geometry.Element)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .viro.Node.Geometry.Element.Primitive primitive = 2;
  if (this->primitive() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->primitive());
  }

  // uint32 primitive_count = 3;
  if (this->primitive_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->primitive_count());
  }

  // uint32 bytes_per_index = 4;
  if (this->bytes_per_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bytes_per_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Geometry_Element::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Geometry_Element*>(&from));
}

void Node_Geometry_Element::MergeFrom(const Node_Geometry_Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Geometry.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.primitive() != 0) {
    set_primitive(from.primitive());
  }
  if (from.primitive_count() != 0) {
    set_primitive_count(from.primitive_count());
  }
  if (from.bytes_per_index() != 0) {
    set_bytes_per_index(from.bytes_per_index());
  }
}

void Node_Geometry_Element::CopyFrom(const Node_Geometry_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Geometry.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Geometry_Element::IsInitialized() const {
  return true;
}

void Node_Geometry_Element::Swap(Node_Geometry_Element* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Geometry_Element::InternalSwap(Node_Geometry_Element* other) {
  data_.Swap(&other->data_);
  std::swap(primitive_, other->primitive_);
  std::swap(primitive_count_, other->primitive_count_);
  std::swap(bytes_per_index_, other->bytes_per_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Geometry_Element::GetTypeName() const {
  return "viro.Node.Geometry.Element";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Geometry_Element

// bytes data = 1;
void Node_Geometry_Element::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node_Geometry_Element::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.data)
  return data_.GetNoArena();
}
void Node_Geometry_Element::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.data)
}
#if LANG_CXX11
void Node_Geometry_Element::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Element.data)
}
#endif
void Node_Geometry_Element::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Element.data)
}
void Node_Geometry_Element::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Element.data)
}
::std::string* Node_Geometry_Element::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Element.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node_Geometry_Element::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Element.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node_Geometry_Element::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Element.data)
}

// .viro.Node.Geometry.Element.Primitive primitive = 2;
void Node_Geometry_Element::clear_primitive() {
  primitive_ = 0;
}
::viro::Node_Geometry_Element_Primitive Node_Geometry_Element::primitive() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.primitive)
  return static_cast< ::viro::Node_Geometry_Element_Primitive >(primitive_);
}
void Node_Geometry_Element::set_primitive(::viro::Node_Geometry_Element_Primitive value) {
  
  primitive_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.primitive)
}

// uint32 primitive_count = 3;
void Node_Geometry_Element::clear_primitive_count() {
  primitive_count_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Element::primitive_count() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.primitive_count)
  return primitive_count_;
}
void Node_Geometry_Element::set_primitive_count(::google::protobuf::uint32 value) {
  
  primitive_count_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.primitive_count)
}

// uint32 bytes_per_index = 4;
void Node_Geometry_Element::clear_bytes_per_index() {
  bytes_per_index_ = 0u;
}
::google::protobuf::uint32 Node_Geometry_Element::bytes_per_index() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.bytes_per_index)
  return bytes_per_index_;
}
void Node_Geometry_Element::set_bytes_per_index(::google::protobuf::uint32 value) {
  
  bytes_per_index_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.bytes_per_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Geometry_Material_Visual::kColorFieldNumber;
const int Node_Geometry_Material_Visual::kTextureFieldNumber;
const int Node_Geometry_Material_Visual::kIntensityFieldNumber;
const int Node_Geometry_Material_Visual::kTransformFieldNumber;
const int Node_Geometry_Material_Visual::kWrapModeSFieldNumber;
const int Node_Geometry_Material_Visual::kWrapModeTFieldNumber;
const int Node_Geometry_Material_Visual::kMinificationFilterFieldNumber;
const int Node_Geometry_Material_Visual::kMagnificationFilterFieldNumber;
const int Node_Geometry_Material_Visual::kMipFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Geometry_Material_Visual::Node_Geometry_Material_Visual()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Geometry.Material.Visual)
}
Node_Geometry_Material_Visual::Node_Geometry_Material_Visual(const Node_Geometry_Material_Visual& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      color_(from.color_),
      transform_(from.transform_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.texture().size() > 0) {
    texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
  }
  ::memcpy(&intensity_, &from.intensity_,
    reinterpret_cast<char*>(&mip_filter_) -
    reinterpret_cast<char*>(&intensity_) + sizeof(mip_filter_));
  // @@protoc_insertion_point(copy_constructor:viro.Node.Geometry.Material.Visual)
}

void Node_Geometry_Material_Visual::SharedCtor() {
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&intensity_, 0, reinterpret_cast<char*>(&mip_filter_) -
    reinterpret_cast<char*>(&intensity_) + sizeof(mip_filter_));
  _cached_size_ = 0;
}

Node_Geometry_Material_Visual::~Node_Geometry_Material_Visual() {
  // @@protoc_insertion_point(destructor:viro.Node.Geometry.Material.Visual)
  SharedDtor();
}

void Node_Geometry_Material_Visual::SharedDtor() {
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node_Geometry_Material_Visual::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Geometry_Material_Visual& Node_Geometry_Material_Visual::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Geometry_Material_Visual* Node_Geometry_Material_Visual::New(::google::protobuf::Arena* arena) const {
  Node_Geometry_Material_Visual* n = new Node_Geometry_Material_Visual;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Geometry_Material_Visual::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Geometry.Material.Visual)
  color_.Clear();
  transform_.Clear();
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&intensity_, 0, reinterpret_cast<char*>(&mip_filter_) -
    reinterpret_cast<char*>(&intensity_) + sizeof(mip_filter_));
}

bool Node_Geometry_Material_Visual::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Geometry.Material.Visual)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float color = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_color())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string texture = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->texture().data(), this->texture().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "viro.Node.Geometry.Material.Visual.texture"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intensity = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float transform = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_transform())));
        } else if (tag == 37u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_transform())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wrap_mode_s(static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wrap_mode_t(static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_minification_filter(static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_magnification_filter(static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mip_filter(static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Geometry.Material.Visual)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Geometry.Material.Visual)
  return false;
#undef DO_
}

void Node_Geometry_Material_Visual::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Geometry.Material.Visual)
  // repeated float color = 1;
  if (this->color_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_color_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->color().data(), this->color_size(), output);
  }

  // string texture = 2;
  if (this->texture().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->texture().data(), this->texture().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "viro.Node.Geometry.Material.Visual.texture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->texture(), output);
  }

  // float intensity = 3;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->intensity(), output);
  }

  // repeated float transform = 4;
  if (this->transform_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_transform_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->transform().data(), this->transform_size(), output);
  }

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
  if (this->wrap_mode_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wrap_mode_s(), output);
  }

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
  if (this->wrap_mode_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->wrap_mode_t(), output);
  }

  // .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
  if (this->minification_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->minification_filter(), output);
  }

  // .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
  if (this->magnification_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->magnification_filter(), output);
  }

  // .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
  if (this->mip_filter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->mip_filter(), output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Geometry.Material.Visual)
}

size_t Node_Geometry_Material_Visual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Geometry.Material.Visual)
  size_t total_size = 0;

  // repeated float color = 1;
  {
    unsigned int count = this->color_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _color_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float transform = 4;
  {
    unsigned int count = this->transform_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _transform_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string texture = 2;
  if (this->texture().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->texture());
  }

  // float intensity = 3;
  if (this->intensity() != 0) {
    total_size += 1 + 4;
  }

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
  if (this->wrap_mode_s() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wrap_mode_s());
  }

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
  if (this->wrap_mode_t() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wrap_mode_t());
  }

  // .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
  if (this->minification_filter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->minification_filter());
  }

  // .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
  if (this->magnification_filter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->magnification_filter());
  }

  // .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
  if (this->mip_filter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mip_filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Geometry_Material_Visual::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Geometry_Material_Visual*>(&from));
}

void Node_Geometry_Material_Visual::MergeFrom(const Node_Geometry_Material_Visual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Geometry.Material.Visual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.MergeFrom(from.color_);
  transform_.MergeFrom(from.transform_);
  if (from.texture().size() > 0) {

    texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
  if (from.wrap_mode_s() != 0) {
    set_wrap_mode_s(from.wrap_mode_s());
  }
  if (from.wrap_mode_t() != 0) {
    set_wrap_mode_t(from.wrap_mode_t());
  }
  if (from.minification_filter() != 0) {
    set_minification_filter(from.minification_filter());
  }
  if (from.magnification_filter() != 0) {
    set_magnification_filter(from.magnification_filter());
  }
  if (from.mip_filter() != 0) {
    set_mip_filter(from.mip_filter());
  }
}

void Node_Geometry_Material_Visual::CopyFrom(const Node_Geometry_Material_Visual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Geometry.Material.Visual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Geometry_Material_Visual::IsInitialized() const {
  return true;
}

void Node_Geometry_Material_Visual::Swap(Node_Geometry_Material_Visual* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Geometry_Material_Visual::InternalSwap(Node_Geometry_Material_Visual* other) {
  color_.UnsafeArenaSwap(&other->color_);
  transform_.UnsafeArenaSwap(&other->transform_);
  texture_.Swap(&other->texture_);
  std::swap(intensity_, other->intensity_);
  std::swap(wrap_mode_s_, other->wrap_mode_s_);
  std::swap(wrap_mode_t_, other->wrap_mode_t_);
  std::swap(minification_filter_, other->minification_filter_);
  std::swap(magnification_filter_, other->magnification_filter_);
  std::swap(mip_filter_, other->mip_filter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Geometry_Material_Visual::GetTypeName() const {
  return "viro.Node.Geometry.Material.Visual";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Geometry_Material_Visual

// repeated float color = 1;
int Node_Geometry_Material_Visual::color_size() const {
  return color_.size();
}
void Node_Geometry_Material_Visual::clear_color() {
  color_.Clear();
}
float Node_Geometry_Material_Visual::color(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.color)
  return color_.Get(index);
}
void Node_Geometry_Material_Visual::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.color)
}
void Node_Geometry_Material_Visual::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.Visual.color)
}
const ::google::protobuf::RepeatedField< float >&
Node_Geometry_Material_Visual::color() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.Visual.color)
  return color_;
}
::google::protobuf::RepeatedField< float >*
Node_Geometry_Material_Visual::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.Visual.color)
  return &color_;
}

// string texture = 2;
void Node_Geometry_Material_Visual::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node_Geometry_Material_Visual::texture() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.texture)
  return texture_.GetNoArena();
}
void Node_Geometry_Material_Visual::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.texture)
}
#if LANG_CXX11
void Node_Geometry_Material_Visual::set_texture(::std::string&& value) {
  
  texture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Material.Visual.texture)
}
#endif
void Node_Geometry_Material_Visual::set_texture(const char* value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Material.Visual.texture)
}
void Node_Geometry_Material_Visual::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Material.Visual.texture)
}
::std::string* Node_Geometry_Material_Visual::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.Visual.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node_Geometry_Material_Visual::release_texture() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.Visual.texture)
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node_Geometry_Material_Visual::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.Visual.texture)
}

// float intensity = 3;
void Node_Geometry_Material_Visual::clear_intensity() {
  intensity_ = 0;
}
float Node_Geometry_Material_Visual::intensity() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.intensity)
  return intensity_;
}
void Node_Geometry_Material_Visual::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.intensity)
}

// repeated float transform = 4;
int Node_Geometry_Material_Visual::transform_size() const {
  return transform_.size();
}
void Node_Geometry_Material_Visual::clear_transform() {
  transform_.Clear();
}
float Node_Geometry_Material_Visual::transform(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.transform)
  return transform_.Get(index);
}
void Node_Geometry_Material_Visual::set_transform(int index, float value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.transform)
}
void Node_Geometry_Material_Visual::add_transform(float value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.Visual.transform)
}
const ::google::protobuf::RepeatedField< float >&
Node_Geometry_Material_Visual::transform() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.Visual.transform)
  return transform_;
}
::google::protobuf::RepeatedField< float >*
Node_Geometry_Material_Visual::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.Visual.transform)
  return &transform_;
}

// .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
void Node_Geometry_Material_Visual::clear_wrap_mode_s() {
  wrap_mode_s_ = 0;
}
::viro::Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::wrap_mode_s() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.wrap_mode_s)
  return static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(wrap_mode_s_);
}
void Node_Geometry_Material_Visual::set_wrap_mode_s(::viro::Node_Geometry_Material_Visual_WrapMode value) {
  
  wrap_mode_s_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.wrap_mode_s)
}

// .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
void Node_Geometry_Material_Visual::clear_wrap_mode_t() {
  wrap_mode_t_ = 0;
}
::viro::Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::wrap_mode_t() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.wrap_mode_t)
  return static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(wrap_mode_t_);
}
void Node_Geometry_Material_Visual::set_wrap_mode_t(::viro::Node_Geometry_Material_Visual_WrapMode value) {
  
  wrap_mode_t_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.wrap_mode_t)
}

// .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
void Node_Geometry_Material_Visual::clear_minification_filter() {
  minification_filter_ = 0;
}
::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::minification_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.minification_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(minification_filter_);
}
void Node_Geometry_Material_Visual::set_minification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  minification_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.minification_filter)
}

// .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
void Node_Geometry_Material_Visual::clear_magnification_filter() {
  magnification_filter_ = 0;
}
::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::magnification_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.magnification_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(magnification_filter_);
}
void Node_Geometry_Material_Visual::set_magnification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  magnification_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.magnification_filter)
}

// .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
void Node_Geometry_Material_Visual::clear_mip_filter() {
  mip_filter_ = 0;
}
::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::mip_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.mip_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(mip_filter_);
}
void Node_Geometry_Material_Visual::set_mip_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  mip_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.mip_filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Geometry_Material::kNameFieldNumber;
const int Node_Geometry_Material::kShininessFieldNumber;
const int Node_Geometry_Material::kFresnelExponentFieldNumber;
const int Node_Geometry_Material::kTransparencyFieldNumber;
const int Node_Geometry_Material::kLightingModelFieldNumber;
const int Node_Geometry_Material::kLitPerPixelFieldNumber;
const int Node_Geometry_Material::kCullModeFieldNumber;
const int Node_Geometry_Material::kBlendModeFieldNumber;
const int Node_Geometry_Material::kReadsFromDepthBufferFieldNumber;
const int Node_Geometry_Material::kWritesToDepthBufferFieldNumber;
const int Node_Geometry_Material::kDiffuseFieldNumber;
const int Node_Geometry_Material::kSpecularFieldNumber;
const int Node_Geometry_Material::kNormalFieldNumber;
const int Node_Geometry_Material::kReflectiveFieldNumber;
const int Node_Geometry_Material::kEmissionFieldNumber;
const int Node_Geometry_Material::kMultiplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Geometry_Material::Node_Geometry_Material()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Geometry.Material)
}
Node_Geometry_Material::Node_Geometry_Material(const Node_Geometry_Material& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_diffuse()) {
    diffuse_ = new ::viro::Node_Geometry_Material_Visual(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::viro::Node_Geometry_Material_Visual(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::viro::Node_Geometry_Material_Visual(*from.normal_);
  } else {
    normal_ = NULL;
  }
  if (from.has_reflective()) {
    reflective_ = new ::viro::Node_Geometry_Material_Visual(*from.reflective_);
  } else {
    reflective_ = NULL;
  }
  if (from.has_emission()) {
    emission_ = new ::viro::Node_Geometry_Material_Visual(*from.emission_);
  } else {
    emission_ = NULL;
  }
  if (from.has_multiply()) {
    multiply_ = new ::viro::Node_Geometry_Material_Visual(*from.multiply_);
  } else {
    multiply_ = NULL;
  }
  ::memcpy(&shininess_, &from.shininess_,
    reinterpret_cast<char*>(&writes_to_depth_buffer_) -
    reinterpret_cast<char*>(&shininess_) + sizeof(writes_to_depth_buffer_));
  // @@protoc_insertion_point(copy_constructor:viro.Node.Geometry.Material)
}

void Node_Geometry_Material::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&diffuse_, 0, reinterpret_cast<char*>(&writes_to_depth_buffer_) -
    reinterpret_cast<char*>(&diffuse_) + sizeof(writes_to_depth_buffer_));
  _cached_size_ = 0;
}

Node_Geometry_Material::~Node_Geometry_Material() {
  // @@protoc_insertion_point(destructor:viro.Node.Geometry.Material)
  SharedDtor();
}

void Node_Geometry_Material::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete diffuse_;
  }
  if (this != internal_default_instance()) {
    delete specular_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
  if (this != internal_default_instance()) {
    delete reflective_;
  }
  if (this != internal_default_instance()) {
    delete emission_;
  }
  if (this != internal_default_instance()) {
    delete multiply_;
  }
}

void Node_Geometry_Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Geometry_Material& Node_Geometry_Material::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Geometry_Material* Node_Geometry_Material::New(::google::protobuf::Arena* arena) const {
  Node_Geometry_Material* n = new Node_Geometry_Material;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Geometry_Material::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Geometry.Material)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
  if (GetArenaNoVirtual() == NULL && reflective_ != NULL) {
    delete reflective_;
  }
  reflective_ = NULL;
  if (GetArenaNoVirtual() == NULL && emission_ != NULL) {
    delete emission_;
  }
  emission_ = NULL;
  if (GetArenaNoVirtual() == NULL && multiply_ != NULL) {
    delete multiply_;
  }
  multiply_ = NULL;
  ::memset(&shininess_, 0, reinterpret_cast<char*>(&writes_to_depth_buffer_) -
    reinterpret_cast<char*>(&shininess_) + sizeof(writes_to_depth_buffer_));
}

bool Node_Geometry_Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Geometry.Material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "viro.Node.Geometry.Material.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float shininess = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shininess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fresnel_exponent = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fresnel_exponent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float transparency = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lighting_model(static_cast< ::viro::Node_Geometry_Material_LightingModel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lit_per_pixel = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lit_per_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.CullMode cull_mode = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cull_mode(static_cast< ::viro::Node_Geometry_Material_CullMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
      case 8: {
        if (tag == 64u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blend_mode(static_cast< ::viro::Node_Geometry_Material_BlendMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reads_from_depth_buffer = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reads_from_depth_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool writes_to_depth_buffer = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writes_to_depth_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual diffuse = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual specular = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual normal = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual reflective = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reflective()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual emission = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry.Material.Visual multiply = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Geometry.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Geometry.Material)
  return false;
#undef DO_
}

void Node_Geometry_Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Geometry.Material)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "viro.Node.Geometry.Material.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // float shininess = 2;
  if (this->shininess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->shininess(), output);
  }

  // float fresnel_exponent = 3;
  if (this->fresnel_exponent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fresnel_exponent(), output);
  }

  // float transparency = 4;
  if (this->transparency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->transparency(), output);
  }

  // .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
  if (this->lighting_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->lighting_model(), output);
  }

  // bool lit_per_pixel = 6;
  if (this->lit_per_pixel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->lit_per_pixel(), output);
  }

  // .viro.Node.Geometry.Material.CullMode cull_mode = 7;
  if (this->cull_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->cull_mode(), output);
  }

  // .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
  if (this->blend_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->blend_mode(), output);
  }

  // bool reads_from_depth_buffer = 9;
  if (this->reads_from_depth_buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->reads_from_depth_buffer(), output);
  }

  // bool writes_to_depth_buffer = 10;
  if (this->writes_to_depth_buffer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->writes_to_depth_buffer(), output);
  }

  // .viro.Node.Geometry.Material.Visual diffuse = 11;
  if (this->has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->diffuse_, output);
  }

  // .viro.Node.Geometry.Material.Visual specular = 12;
  if (this->has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->specular_, output);
  }

  // .viro.Node.Geometry.Material.Visual normal = 13;
  if (this->has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->normal_, output);
  }

  // .viro.Node.Geometry.Material.Visual reflective = 14;
  if (this->has_reflective()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->reflective_, output);
  }

  // .viro.Node.Geometry.Material.Visual emission = 15;
  if (this->has_emission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, *this->emission_, output);
  }

  // .viro.Node.Geometry.Material.Visual multiply = 16;
  if (this->has_multiply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->multiply_, output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Geometry.Material)
}

size_t Node_Geometry_Material::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Geometry.Material)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .viro.Node.Geometry.Material.Visual diffuse = 11;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->diffuse_);
  }

  // .viro.Node.Geometry.Material.Visual specular = 12;
  if (this->has_specular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->specular_);
  }

  // .viro.Node.Geometry.Material.Visual normal = 13;
  if (this->has_normal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_);
  }

  // .viro.Node.Geometry.Material.Visual reflective = 14;
  if (this->has_reflective()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reflective_);
  }

  // .viro.Node.Geometry.Material.Visual emission = 15;
  if (this->has_emission()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emission_);
  }

  // .viro.Node.Geometry.Material.Visual multiply = 16;
  if (this->has_multiply()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->multiply_);
  }

  // float shininess = 2;
  if (this->shininess() != 0) {
    total_size += 1 + 4;
  }

  // float fresnel_exponent = 3;
  if (this->fresnel_exponent() != 0) {
    total_size += 1 + 4;
  }

  // float transparency = 4;
  if (this->transparency() != 0) {
    total_size += 1 + 4;
  }

  // .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
  if (this->lighting_model() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lighting_model());
  }

  // .viro.Node.Geometry.Material.CullMode cull_mode = 7;
  if (this->cull_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cull_mode());
  }

  // .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
  if (this->blend_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blend_mode());
  }

  // bool lit_per_pixel = 6;
  if (this->lit_per_pixel() != 0) {
    total_size += 1 + 1;
  }

  // bool reads_from_depth_buffer = 9;
  if (this->reads_from_depth_buffer() != 0) {
    total_size += 1 + 1;
  }

  // bool writes_to_depth_buffer = 10;
  if (this->writes_to_depth_buffer() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Geometry_Material::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Geometry_Material*>(&from));
}

void Node_Geometry_Material::MergeFrom(const Node_Geometry_Material& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Geometry.Material)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_diffuse()) {
    mutable_diffuse()->::viro::Node_Geometry_Material_Visual::MergeFrom(from.diffuse());
  }
  if (from.has_specular()) {
    mutable_specular()->::viro::Node_Geometry_Material_Visual::MergeFrom(from.specular());
  }
  if (from.has_normal()) {
    mutable_normal()->::viro::Node_Geometry_Material_Visual::MergeFrom(from.normal());
  }
  if (from.has_reflective()) {
    mutable_reflective()->::viro::Node_Geometry_Material_Visual::MergeFrom(from.reflective());
  }
  if (from.has_emission()) {
    mutable_emission()->::viro::Node_Geometry_Material_Visual::MergeFrom(from.emission());
  }
  if (from.has_multiply()) {
    mutable_multiply()->::viro::Node_Geometry_Material_Visual::MergeFrom(from.multiply());
  }
  if (from.shininess() != 0) {
    set_shininess(from.shininess());
  }
  if (from.fresnel_exponent() != 0) {
    set_fresnel_exponent(from.fresnel_exponent());
  }
  if (from.transparency() != 0) {
    set_transparency(from.transparency());
  }
  if (from.lighting_model() != 0) {
    set_lighting_model(from.lighting_model());
  }
  if (from.cull_mode() != 0) {
    set_cull_mode(from.cull_mode());
  }
  if (from.blend_mode() != 0) {
    set_blend_mode(from.blend_mode());
  }
  if (from.lit_per_pixel() != 0) {
    set_lit_per_pixel(from.lit_per_pixel());
  }
  if (from.reads_from_depth_buffer() != 0) {
    set_reads_from_depth_buffer(from.reads_from_depth_buffer());
  }
  if (from.writes_to_depth_buffer() != 0) {
    set_writes_to_depth_buffer(from.writes_to_depth_buffer());
  }
}

void Node_Geometry_Material::CopyFrom(const Node_Geometry_Material& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Geometry.Material)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Geometry_Material::IsInitialized() const {
  return true;
}

void Node_Geometry_Material::Swap(Node_Geometry_Material* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Geometry_Material::InternalSwap(Node_Geometry_Material* other) {
  name_.Swap(&other->name_);
  std::swap(diffuse_, other->diffuse_);
  std::swap(specular_, other->specular_);
  std::swap(normal_, other->normal_);
  std::swap(reflective_, other->reflective_);
  std::swap(emission_, other->emission_);
  std::swap(multiply_, other->multiply_);
  std::swap(shininess_, other->shininess_);
  std::swap(fresnel_exponent_, other->fresnel_exponent_);
  std::swap(transparency_, other->transparency_);
  std::swap(lighting_model_, other->lighting_model_);
  std::swap(cull_mode_, other->cull_mode_);
  std::swap(blend_mode_, other->blend_mode_);
  std::swap(lit_per_pixel_, other->lit_per_pixel_);
  std::swap(reads_from_depth_buffer_, other->reads_from_depth_buffer_);
  std::swap(writes_to_depth_buffer_, other->writes_to_depth_buffer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Geometry_Material::GetTypeName() const {
  return "viro.Node.Geometry.Material";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Geometry_Material

// string name = 1;
void Node_Geometry_Material::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node_Geometry_Material::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.name)
  return name_.GetNoArena();
}
void Node_Geometry_Material::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.name)
}
#if LANG_CXX11
void Node_Geometry_Material::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Material.name)
}
#endif
void Node_Geometry_Material::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Material.name)
}
void Node_Geometry_Material::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Material.name)
}
::std::string* Node_Geometry_Material::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node_Geometry_Material::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node_Geometry_Material::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.name)
}

// float shininess = 2;
void Node_Geometry_Material::clear_shininess() {
  shininess_ = 0;
}
float Node_Geometry_Material::shininess() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.shininess)
  return shininess_;
}
void Node_Geometry_Material::set_shininess(float value) {
  
  shininess_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.shininess)
}

// float fresnel_exponent = 3;
void Node_Geometry_Material::clear_fresnel_exponent() {
  fresnel_exponent_ = 0;
}
float Node_Geometry_Material::fresnel_exponent() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.fresnel_exponent)
  return fresnel_exponent_;
}
void Node_Geometry_Material::set_fresnel_exponent(float value) {
  
  fresnel_exponent_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.fresnel_exponent)
}

// float transparency = 4;
void Node_Geometry_Material::clear_transparency() {
  transparency_ = 0;
}
float Node_Geometry_Material::transparency() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.transparency)
  return transparency_;
}
void Node_Geometry_Material::set_transparency(float value) {
  
  transparency_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.transparency)
}

// .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
void Node_Geometry_Material::clear_lighting_model() {
  lighting_model_ = 0;
}
::viro::Node_Geometry_Material_LightingModel Node_Geometry_Material::lighting_model() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.lighting_model)
  return static_cast< ::viro::Node_Geometry_Material_LightingModel >(lighting_model_);
}
void Node_Geometry_Material::set_lighting_model(::viro::Node_Geometry_Material_LightingModel value) {
  
  lighting_model_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.lighting_model)
}

// bool lit_per_pixel = 6;
void Node_Geometry_Material::clear_lit_per_pixel() {
  lit_per_pixel_ = false;
}
bool Node_Geometry_Material::lit_per_pixel() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.lit_per_pixel)
  return lit_per_pixel_;
}
void Node_Geometry_Material::set_lit_per_pixel(bool value) {
  
  lit_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.lit_per_pixel)
}

// .viro.Node.Geometry.Material.CullMode cull_mode = 7;
void Node_Geometry_Material::clear_cull_mode() {
  cull_mode_ = 0;
}
::viro::Node_Geometry_Material_CullMode Node_Geometry_Material::cull_mode() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.cull_mode)
  return static_cast< ::viro::Node_Geometry_Material_CullMode >(cull_mode_);
}
void Node_Geometry_Material::set_cull_mode(::viro::Node_Geometry_Material_CullMode value) {
  
  cull_mode_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.cull_mode)
}

// .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
void Node_Geometry_Material::clear_blend_mode() {
  blend_mode_ = 0;
}
::viro::Node_Geometry_Material_BlendMode Node_Geometry_Material::blend_mode() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.blend_mode)
  return static_cast< ::viro::Node_Geometry_Material_BlendMode >(blend_mode_);
}
void Node_Geometry_Material::set_blend_mode(::viro::Node_Geometry_Material_BlendMode value) {
  
  blend_mode_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.blend_mode)
}

// bool reads_from_depth_buffer = 9;
void Node_Geometry_Material::clear_reads_from_depth_buffer() {
  reads_from_depth_buffer_ = false;
}
bool Node_Geometry_Material::reads_from_depth_buffer() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.reads_from_depth_buffer)
  return reads_from_depth_buffer_;
}
void Node_Geometry_Material::set_reads_from_depth_buffer(bool value) {
  
  reads_from_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.reads_from_depth_buffer)
}

// bool writes_to_depth_buffer = 10;
void Node_Geometry_Material::clear_writes_to_depth_buffer() {
  writes_to_depth_buffer_ = false;
}
bool Node_Geometry_Material::writes_to_depth_buffer() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.writes_to_depth_buffer)
  return writes_to_depth_buffer_;
}
void Node_Geometry_Material::set_writes_to_depth_buffer(bool value) {
  
  writes_to_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.writes_to_depth_buffer)
}

// .viro.Node.Geometry.Material.Visual diffuse = 11;
bool Node_Geometry_Material::has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != NULL;
}
void Node_Geometry_Material::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) delete diffuse_;
  diffuse_ = NULL;
}
const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::diffuse() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.diffuse)
  return diffuse_ != NULL ? *diffuse_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    diffuse_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.diffuse)
  return diffuse_;
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_diffuse() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.diffuse)
  
  ::viro::Node_Geometry_Material_Visual* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
void Node_Geometry_Material::set_allocated_diffuse(::viro::Node_Geometry_Material_Visual* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.diffuse)
}

// .viro.Node.Geometry.Material.Visual specular = 12;
bool Node_Geometry_Material::has_specular() const {
  return this != internal_default_instance() && specular_ != NULL;
}
void Node_Geometry_Material::clear_specular() {
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) delete specular_;
  specular_ = NULL;
}
const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::specular() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.specular)
  return specular_ != NULL ? *specular_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_specular() {
  
  if (specular_ == NULL) {
    specular_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.specular)
  return specular_;
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_specular() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.specular)
  
  ::viro::Node_Geometry_Material_Visual* temp = specular_;
  specular_ = NULL;
  return temp;
}
void Node_Geometry_Material::set_allocated_specular(::viro::Node_Geometry_Material_Visual* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.specular)
}

// .viro.Node.Geometry.Material.Visual normal = 13;
bool Node_Geometry_Material::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
void Node_Geometry_Material::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) delete normal_;
  normal_ = NULL;
}
const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::normal() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.normal)
  return normal_ != NULL ? *normal_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_normal() {
  
  if (normal_ == NULL) {
    normal_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.normal)
  return normal_;
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_normal() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.normal)
  
  ::viro::Node_Geometry_Material_Visual* temp = normal_;
  normal_ = NULL;
  return temp;
}
void Node_Geometry_Material::set_allocated_normal(::viro::Node_Geometry_Material_Visual* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.normal)
}

// .viro.Node.Geometry.Material.Visual reflective = 14;
bool Node_Geometry_Material::has_reflective() const {
  return this != internal_default_instance() && reflective_ != NULL;
}
void Node_Geometry_Material::clear_reflective() {
  if (GetArenaNoVirtual() == NULL && reflective_ != NULL) delete reflective_;
  reflective_ = NULL;
}
const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::reflective() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.reflective)
  return reflective_ != NULL ? *reflective_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_reflective() {
  
  if (reflective_ == NULL) {
    reflective_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.reflective)
  return reflective_;
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_reflective() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.reflective)
  
  ::viro::Node_Geometry_Material_Visual* temp = reflective_;
  reflective_ = NULL;
  return temp;
}
void Node_Geometry_Material::set_allocated_reflective(::viro::Node_Geometry_Material_Visual* reflective) {
  delete reflective_;
  reflective_ = reflective;
  if (reflective) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.reflective)
}

// .viro.Node.Geometry.Material.Visual emission = 15;
bool Node_Geometry_Material::has_emission() const {
  return this != internal_default_instance() && emission_ != NULL;
}
void Node_Geometry_Material::clear_emission() {
  if (GetArenaNoVirtual() == NULL && emission_ != NULL) delete emission_;
  emission_ = NULL;
}
const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::emission() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.emission)
  return emission_ != NULL ? *emission_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_emission() {
  
  if (emission_ == NULL) {
    emission_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.emission)
  return emission_;
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_emission() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.emission)
  
  ::viro::Node_Geometry_Material_Visual* temp = emission_;
  emission_ = NULL;
  return temp;
}
void Node_Geometry_Material::set_allocated_emission(::viro::Node_Geometry_Material_Visual* emission) {
  delete emission_;
  emission_ = emission;
  if (emission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.emission)
}

// .viro.Node.Geometry.Material.Visual multiply = 16;
bool Node_Geometry_Material::has_multiply() const {
  return this != internal_default_instance() && multiply_ != NULL;
}
void Node_Geometry_Material::clear_multiply() {
  if (GetArenaNoVirtual() == NULL && multiply_ != NULL) delete multiply_;
  multiply_ = NULL;
}
const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::multiply() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.multiply)
  return multiply_ != NULL ? *multiply_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_multiply() {
  
  if (multiply_ == NULL) {
    multiply_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.multiply)
  return multiply_;
}
::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_multiply() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.multiply)
  
  ::viro::Node_Geometry_Material_Visual* temp = multiply_;
  multiply_ = NULL;
  return temp;
}
void Node_Geometry_Material::set_allocated_multiply(::viro::Node_Geometry_Material_Visual* multiply) {
  delete multiply_;
  multiply_ = multiply;
  if (multiply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.multiply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Geometry::kNameFieldNumber;
const int Node_Geometry::kDataFieldNumber;
const int Node_Geometry::kSourceFieldNumber;
const int Node_Geometry::kElementFieldNumber;
const int Node_Geometry::kMaterialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Geometry::Node_Geometry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Geometry)
}
Node_Geometry::Node_Geometry(const Node_Geometry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      source_(from.source_),
      element_(from.element_),
      material_(from.material_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:viro.Node.Geometry)
}

void Node_Geometry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Node_Geometry::~Node_Geometry() {
  // @@protoc_insertion_point(destructor:viro.Node.Geometry)
  SharedDtor();
}

void Node_Geometry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node_Geometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Geometry& Node_Geometry::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Geometry* Node_Geometry::New(::google::protobuf::Arena* arena) const {
  Node_Geometry* n = new Node_Geometry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Geometry)
  source_.Clear();
  element_.Clear();
  material_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Node_Geometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Geometry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "viro.Node.Geometry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .viro.Node.Geometry.Source source = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_source()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .viro.Node.Geometry.Element element = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .viro.Node.Geometry.Material material = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_material()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Geometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Geometry)
  return false;
#undef DO_
}

void Node_Geometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Geometry)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "viro.Node.Geometry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // repeated .viro.Node.Geometry.Source source = 3;
  for (unsigned int i = 0, n = this->source_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->source(i), output);
  }

  // repeated .viro.Node.Geometry.Element element = 4;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->element(i), output);
  }

  // repeated .viro.Node.Geometry.Material material = 5;
  for (unsigned int i = 0, n = this->material_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->material(i), output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Geometry)
}

size_t Node_Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Geometry)
  size_t total_size = 0;

  // repeated .viro.Node.Geometry.Source source = 3;
  {
    unsigned int count = this->source_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source(i));
    }
  }

  // repeated .viro.Node.Geometry.Element element = 4;
  {
    unsigned int count = this->element_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element(i));
    }
  }

  // repeated .viro.Node.Geometry.Material material = 5;
  {
    unsigned int count = this->material_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->material(i));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Geometry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Geometry*>(&from));
}

void Node_Geometry::MergeFrom(const Node_Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.MergeFrom(from.source_);
  element_.MergeFrom(from.element_);
  material_.MergeFrom(from.material_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Node_Geometry::CopyFrom(const Node_Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Geometry::IsInitialized() const {
  return true;
}

void Node_Geometry::Swap(Node_Geometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Geometry::InternalSwap(Node_Geometry* other) {
  source_.UnsafeArenaSwap(&other->source_);
  element_.UnsafeArenaSwap(&other->element_);
  material_.UnsafeArenaSwap(&other->material_);
  name_.Swap(&other->name_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Geometry::GetTypeName() const {
  return "viro.Node.Geometry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Geometry

// string name = 1;
void Node_Geometry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node_Geometry::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.name)
  return name_.GetNoArena();
}
void Node_Geometry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.name)
}
#if LANG_CXX11
void Node_Geometry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.name)
}
#endif
void Node_Geometry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.name)
}
void Node_Geometry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.name)
}
::std::string* Node_Geometry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node_Geometry::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node_Geometry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.name)
}

// bytes data = 2;
void Node_Geometry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node_Geometry::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.data)
  return data_.GetNoArena();
}
void Node_Geometry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.data)
}
#if LANG_CXX11
void Node_Geometry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.data)
}
#endif
void Node_Geometry::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.data)
}
void Node_Geometry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.data)
}
::std::string* Node_Geometry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node_Geometry::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node_Geometry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.data)
}

// repeated .viro.Node.Geometry.Source source = 3;
int Node_Geometry::source_size() const {
  return source_.size();
}
void Node_Geometry::clear_source() {
  source_.Clear();
}
const ::viro::Node_Geometry_Source& Node_Geometry::source(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.source)
  return source_.Get(index);
}
::viro::Node_Geometry_Source* Node_Geometry::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.source)
  return source_.Mutable(index);
}
::viro::Node_Geometry_Source* Node_Geometry::add_source() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.source)
  return source_.Add();
}
::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >*
Node_Geometry::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.source)
  return &source_;
}
const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >&
Node_Geometry::source() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.source)
  return source_;
}

// repeated .viro.Node.Geometry.Element element = 4;
int Node_Geometry::element_size() const {
  return element_.size();
}
void Node_Geometry::clear_element() {
  element_.Clear();
}
const ::viro::Node_Geometry_Element& Node_Geometry::element(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.element)
  return element_.Get(index);
}
::viro::Node_Geometry_Element* Node_Geometry::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.element)
  return element_.Mutable(index);
}
::viro::Node_Geometry_Element* Node_Geometry::add_element() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >*
Node_Geometry::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >&
Node_Geometry::element() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.element)
  return element_;
}

// repeated .viro.Node.Geometry.Material material = 5;
int Node_Geometry::material_size() const {
  return material_.size();
}
void Node_Geometry::clear_material() {
  material_.Clear();
}
const ::viro::Node_Geometry_Material& Node_Geometry::material(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.material)
  return material_.Get(index);
}
::viro::Node_Geometry_Material* Node_Geometry::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.material)
  return material_.Mutable(index);
}
::viro::Node_Geometry_Material* Node_Geometry::add_material() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.material)
  return material_.Add();
}
::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >*
Node_Geometry::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.material)
  return &material_;
}
const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >&
Node_Geometry::material() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.material)
  return material_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Light::kNameFieldNumber;
const int Node_Light::kLightTypeFieldNumber;
const int Node_Light::kColorFieldNumber;
const int Node_Light::kPositionFieldNumber;
const int Node_Light::kDirectionFieldNumber;
const int Node_Light::kIntensityFieldNumber;
const int Node_Light::kTemperatureFieldNumber;
const int Node_Light::kAttenuationStartFieldNumber;
const int Node_Light::kAttenuationEndFieldNumber;
const int Node_Light::kAttenuationFalloffExponentFieldNumber;
const int Node_Light::kSpotInnerAngleFieldNumber;
const int Node_Light::kSpotOuterAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Light::Node_Light()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Light)
}
Node_Light::Node_Light(const Node_Light& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      color_(from.color_),
      position_(from.position_),
      direction_(from.direction_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&light_type_, &from.light_type_,
    reinterpret_cast<char*>(&spot_outer_angle_) -
    reinterpret_cast<char*>(&light_type_) + sizeof(spot_outer_angle_));
  // @@protoc_insertion_point(copy_constructor:viro.Node.Light)
}

void Node_Light::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&light_type_, 0, reinterpret_cast<char*>(&spot_outer_angle_) -
    reinterpret_cast<char*>(&light_type_) + sizeof(spot_outer_angle_));
  _cached_size_ = 0;
}

Node_Light::~Node_Light() {
  // @@protoc_insertion_point(destructor:viro.Node.Light)
  SharedDtor();
}

void Node_Light::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node_Light::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Light& Node_Light::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Light* Node_Light::New(::google::protobuf::Arena* arena) const {
  Node_Light* n = new Node_Light;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Light::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Light)
  color_.Clear();
  position_.Clear();
  direction_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&light_type_, 0, reinterpret_cast<char*>(&spot_outer_angle_) -
    reinterpret_cast<char*>(&light_type_) + sizeof(spot_outer_angle_));
}

bool Node_Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Light)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "viro.Node.Light.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Light.LightType light_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_light_type(static_cast< ::viro::Node_Light_LightType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float color = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_color())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float position = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (tag == 37u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float direction = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_direction())));
        } else if (tag == 45u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_direction())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intensity = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperature = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float attenuation_start = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float attenuation_end = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float attenuation_falloff_exponent = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attenuation_falloff_exponent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spot_inner_angle = 11;
      case 11: {
        if (tag == 93u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_inner_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float spot_outer_angle = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spot_outer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Light)
  return false;
#undef DO_
}

void Node_Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Light)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "viro.Node.Light.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .viro.Node.Light.LightType light_type = 2;
  if (this->light_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->light_type(), output);
  }

  // repeated float color = 3;
  if (this->color_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_color_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->color().data(), this->color_size(), output);
  }

  // repeated float position = 4;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated float direction = 5;
  if (this->direction_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_direction_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->direction().data(), this->direction_size(), output);
  }

  // float intensity = 6;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->intensity(), output);
  }

  // float temperature = 7;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->temperature(), output);
  }

  // float attenuation_start = 8;
  if (this->attenuation_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->attenuation_start(), output);
  }

  // float attenuation_end = 9;
  if (this->attenuation_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->attenuation_end(), output);
  }

  // float attenuation_falloff_exponent = 10;
  if (this->attenuation_falloff_exponent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->attenuation_falloff_exponent(), output);
  }

  // float spot_inner_angle = 11;
  if (this->spot_inner_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->spot_inner_angle(), output);
  }

  // float spot_outer_angle = 12;
  if (this->spot_outer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->spot_outer_angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Light)
}

size_t Node_Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Light)
  size_t total_size = 0;

  // repeated float color = 3;
  {
    unsigned int count = this->color_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _color_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float position = 4;
  {
    unsigned int count = this->position_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float direction = 5;
  {
    unsigned int count = this->direction_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _direction_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .viro.Node.Light.LightType light_type = 2;
  if (this->light_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->light_type());
  }

  // float intensity = 6;
  if (this->intensity() != 0) {
    total_size += 1 + 4;
  }

  // float temperature = 7;
  if (this->temperature() != 0) {
    total_size += 1 + 4;
  }

  // float attenuation_start = 8;
  if (this->attenuation_start() != 0) {
    total_size += 1 + 4;
  }

  // float attenuation_end = 9;
  if (this->attenuation_end() != 0) {
    total_size += 1 + 4;
  }

  // float attenuation_falloff_exponent = 10;
  if (this->attenuation_falloff_exponent() != 0) {
    total_size += 1 + 4;
  }

  // float spot_inner_angle = 11;
  if (this->spot_inner_angle() != 0) {
    total_size += 1 + 4;
  }

  // float spot_outer_angle = 12;
  if (this->spot_outer_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Light::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Light*>(&from));
}

void Node_Light::MergeFrom(const Node_Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.MergeFrom(from.color_);
  position_.MergeFrom(from.position_);
  direction_.MergeFrom(from.direction_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.light_type() != 0) {
    set_light_type(from.light_type());
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.attenuation_start() != 0) {
    set_attenuation_start(from.attenuation_start());
  }
  if (from.attenuation_end() != 0) {
    set_attenuation_end(from.attenuation_end());
  }
  if (from.attenuation_falloff_exponent() != 0) {
    set_attenuation_falloff_exponent(from.attenuation_falloff_exponent());
  }
  if (from.spot_inner_angle() != 0) {
    set_spot_inner_angle(from.spot_inner_angle());
  }
  if (from.spot_outer_angle() != 0) {
    set_spot_outer_angle(from.spot_outer_angle());
  }
}

void Node_Light::CopyFrom(const Node_Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Light::IsInitialized() const {
  return true;
}

void Node_Light::Swap(Node_Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Light::InternalSwap(Node_Light* other) {
  color_.UnsafeArenaSwap(&other->color_);
  position_.UnsafeArenaSwap(&other->position_);
  direction_.UnsafeArenaSwap(&other->direction_);
  name_.Swap(&other->name_);
  std::swap(light_type_, other->light_type_);
  std::swap(intensity_, other->intensity_);
  std::swap(temperature_, other->temperature_);
  std::swap(attenuation_start_, other->attenuation_start_);
  std::swap(attenuation_end_, other->attenuation_end_);
  std::swap(attenuation_falloff_exponent_, other->attenuation_falloff_exponent_);
  std::swap(spot_inner_angle_, other->spot_inner_angle_);
  std::swap(spot_outer_angle_, other->spot_outer_angle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Light::GetTypeName() const {
  return "viro.Node.Light";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Light

// string name = 1;
void Node_Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Node_Light::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.name)
  return name_.GetNoArena();
}
void Node_Light::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.name)
}
#if LANG_CXX11
void Node_Light::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Light.name)
}
#endif
void Node_Light::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Light.name)
}
void Node_Light::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Light.name)
}
::std::string* Node_Light::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Light.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Node_Light::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Light.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Node_Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Light.name)
}

// .viro.Node.Light.LightType light_type = 2;
void Node_Light::clear_light_type() {
  light_type_ = 0;
}
::viro::Node_Light_LightType Node_Light::light_type() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.light_type)
  return static_cast< ::viro::Node_Light_LightType >(light_type_);
}
void Node_Light::set_light_type(::viro::Node_Light_LightType value) {
  
  light_type_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.light_type)
}

// repeated float color = 3;
int Node_Light::color_size() const {
  return color_.size();
}
void Node_Light::clear_color() {
  color_.Clear();
}
float Node_Light::color(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.color)
  return color_.Get(index);
}
void Node_Light::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.color)
}
void Node_Light::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.color)
}
const ::google::protobuf::RepeatedField< float >&
Node_Light::color() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.color)
  return color_;
}
::google::protobuf::RepeatedField< float >*
Node_Light::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.color)
  return &color_;
}

// repeated float position = 4;
int Node_Light::position_size() const {
  return position_.size();
}
void Node_Light::clear_position() {
  position_.Clear();
}
float Node_Light::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.position)
  return position_.Get(index);
}
void Node_Light::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.position)
}
void Node_Light::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.position)
}
const ::google::protobuf::RepeatedField< float >&
Node_Light::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.position)
  return position_;
}
::google::protobuf::RepeatedField< float >*
Node_Light::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.position)
  return &position_;
}

// repeated float direction = 5;
int Node_Light::direction_size() const {
  return direction_.size();
}
void Node_Light::clear_direction() {
  direction_.Clear();
}
float Node_Light::direction(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.direction)
  return direction_.Get(index);
}
void Node_Light::set_direction(int index, float value) {
  direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.direction)
}
void Node_Light::add_direction(float value) {
  direction_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.direction)
}
const ::google::protobuf::RepeatedField< float >&
Node_Light::direction() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.direction)
  return direction_;
}
::google::protobuf::RepeatedField< float >*
Node_Light::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.direction)
  return &direction_;
}

// float intensity = 6;
void Node_Light::clear_intensity() {
  intensity_ = 0;
}
float Node_Light::intensity() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.intensity)
  return intensity_;
}
void Node_Light::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.intensity)
}

// float temperature = 7;
void Node_Light::clear_temperature() {
  temperature_ = 0;
}
float Node_Light::temperature() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.temperature)
  return temperature_;
}
void Node_Light::set_temperature(float value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.temperature)
}

// float attenuation_start = 8;
void Node_Light::clear_attenuation_start() {
  attenuation_start_ = 0;
}
float Node_Light::attenuation_start() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_start)
  return attenuation_start_;
}
void Node_Light::set_attenuation_start(float value) {
  
  attenuation_start_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_start)
}

// float attenuation_end = 9;
void Node_Light::clear_attenuation_end() {
  attenuation_end_ = 0;
}
float Node_Light::attenuation_end() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_end)
  return attenuation_end_;
}
void Node_Light::set_attenuation_end(float value) {
  
  attenuation_end_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_end)
}

// float attenuation_falloff_exponent = 10;
void Node_Light::clear_attenuation_falloff_exponent() {
  attenuation_falloff_exponent_ = 0;
}
float Node_Light::attenuation_falloff_exponent() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_falloff_exponent)
  return attenuation_falloff_exponent_;
}
void Node_Light::set_attenuation_falloff_exponent(float value) {
  
  attenuation_falloff_exponent_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_falloff_exponent)
}

// float spot_inner_angle = 11;
void Node_Light::clear_spot_inner_angle() {
  spot_inner_angle_ = 0;
}
float Node_Light::spot_inner_angle() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.spot_inner_angle)
  return spot_inner_angle_;
}
void Node_Light::set_spot_inner_angle(float value) {
  
  spot_inner_angle_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.spot_inner_angle)
}

// float spot_outer_angle = 12;
void Node_Light::clear_spot_outer_angle() {
  spot_outer_angle_ = 0;
}
float Node_Light::spot_outer_angle() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.spot_outer_angle)
  return spot_outer_angle_;
}
void Node_Light::set_spot_outer_angle(float value) {
  
  spot_outer_angle_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.spot_outer_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Camera::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Camera::Node_Camera()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node.Camera)
}
Node_Camera::Node_Camera(const Node_Camera& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      position_(from.position_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viro.Node.Camera)
}

void Node_Camera::SharedCtor() {
  _cached_size_ = 0;
}

Node_Camera::~Node_Camera() {
  // @@protoc_insertion_point(destructor:viro.Node.Camera)
  SharedDtor();
}

void Node_Camera::SharedDtor() {
}

void Node_Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node_Camera& Node_Camera::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node_Camera* Node_Camera::New(::google::protobuf::Arena* arena) const {
  Node_Camera* n = new Node_Camera;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node.Camera)
  position_.Clear();
}

bool Node_Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node.Camera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float position = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node.Camera)
  return false;
#undef DO_
}

void Node_Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node.Camera)
  // repeated float position = 1;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position().data(), this->position_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node.Camera)
}

size_t Node_Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node.Camera)
  size_t total_size = 0;

  // repeated float position = 1;
  {
    unsigned int count = this->position_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Camera::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node_Camera*>(&from));
}

void Node_Camera::MergeFrom(const Node_Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_.MergeFrom(from.position_);
}

void Node_Camera::CopyFrom(const Node_Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Camera::IsInitialized() const {
  return true;
}

void Node_Camera::Swap(Node_Camera* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Camera::InternalSwap(Node_Camera* other) {
  position_.UnsafeArenaSwap(&other->position_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node_Camera::GetTypeName() const {
  return "viro.Node.Camera";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Camera

// repeated float position = 1;
int Node_Camera::position_size() const {
  return position_.size();
}
void Node_Camera::clear_position() {
  position_.Clear();
}
float Node_Camera::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Camera.position)
  return position_.Get(index);
}
void Node_Camera::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Camera.position)
}
void Node_Camera::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Camera.position)
}
const ::google::protobuf::RepeatedField< float >&
Node_Camera::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.Camera.position)
  return position_;
}
::google::protobuf::RepeatedField< float >*
Node_Camera::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Camera.position)
  return &position_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kPositionFieldNumber;
const int Node::kScaleFieldNumber;
const int Node::kRotationFieldNumber;
const int Node::kRenderingOrderFieldNumber;
const int Node::kOpacityFieldNumber;
const int Node::kGeometryFieldNumber;
const int Node::kLightFieldNumber;
const int Node::kCameraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Nodes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:viro.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      position_(from.position_),
      scale_(from.scale_),
      rotation_(from.rotation_),
      light_(from.light_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geometry()) {
    geometry_ = new ::viro::Node_Geometry(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  if (from.has_camera()) {
    camera_ = new ::viro::Node_Camera(*from.camera_);
  } else {
    camera_ = NULL;
  }
  ::memcpy(&rendering_order_, &from.rendering_order_,
    reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&rendering_order_) + sizeof(opacity_));
  // @@protoc_insertion_point(copy_constructor:viro.Node)
}

void Node::SharedCtor() {
  ::memset(&geometry_, 0, reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&geometry_) + sizeof(opacity_));
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:viro.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (this != internal_default_instance()) {
    delete geometry_;
  }
  if (this != internal_default_instance()) {
    delete camera_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Node& Node::default_instance() {
  protobuf_Nodes_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:viro.Node)
  position_.Clear();
  scale_.Clear();
  rotation_.Clear();
  light_.Clear();
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) {
    delete geometry_;
  }
  geometry_ = NULL;
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) {
    delete camera_;
  }
  camera_ = NULL;
  ::memset(&rendering_order_, 0, reinterpret_cast<char*>(&opacity_) -
    reinterpret_cast<char*>(&rendering_order_) + sizeof(opacity_));
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:viro.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float position = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scale = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scale())));
        } else if (tag == 21u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_scale())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rotation = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotation())));
        } else if (tag == 29u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_rotation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rendering_order = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rendering_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float opacity = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .viro.Node.Geometry geometry = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .viro.Node.Light light = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_light()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .viro.Node.Camera camera = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:viro.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:viro.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:viro.Node)
  // repeated float position = 1;
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated float scale = 2;
  if (this->scale_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scale_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->scale().data(), this->scale_size(), output);
  }

  // repeated float rotation = 3;
  if (this->rotation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rotation_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->rotation().data(), this->rotation_size(), output);
  }

  // int32 rendering_order = 4;
  if (this->rendering_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rendering_order(), output);
  }

  // float opacity = 5;
  if (this->opacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->opacity(), output);
  }

  // .viro.Node.Geometry geometry = 6;
  if (this->has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->geometry_, output);
  }

  // repeated .viro.Node.Light light = 7;
  for (unsigned int i = 0, n = this->light_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->light(i), output);
  }

  // .viro.Node.Camera camera = 8;
  if (this->has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->camera_, output);
  }

  // @@protoc_insertion_point(serialize_end:viro.Node)
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viro.Node)
  size_t total_size = 0;

  // repeated float position = 1;
  {
    unsigned int count = this->position_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float scale = 2;
  {
    unsigned int count = this->scale_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scale_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float rotation = 3;
  {
    unsigned int count = this->rotation_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rotation_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .viro.Node.Light light = 7;
  {
    unsigned int count = this->light_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->light(i));
    }
  }

  // .viro.Node.Geometry geometry = 6;
  if (this->has_geometry()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->geometry_);
  }

  // .viro.Node.Camera camera = 8;
  if (this->has_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camera_);
  }

  // int32 rendering_order = 4;
  if (this->rendering_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rendering_order());
  }

  // float opacity = 5;
  if (this->opacity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Node*>(&from));
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viro.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_.MergeFrom(from.position_);
  scale_.MergeFrom(from.scale_);
  rotation_.MergeFrom(from.rotation_);
  light_.MergeFrom(from.light_);
  if (from.has_geometry()) {
    mutable_geometry()->::viro::Node_Geometry::MergeFrom(from.geometry());
  }
  if (from.has_camera()) {
    mutable_camera()->::viro::Node_Camera::MergeFrom(from.camera());
  }
  if (from.rendering_order() != 0) {
    set_rendering_order(from.rendering_order());
  }
  if (from.opacity() != 0) {
    set_opacity(from.opacity());
  }
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viro.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  position_.UnsafeArenaSwap(&other->position_);
  scale_.UnsafeArenaSwap(&other->scale_);
  rotation_.UnsafeArenaSwap(&other->rotation_);
  light_.UnsafeArenaSwap(&other->light_);
  std::swap(geometry_, other->geometry_);
  std::swap(camera_, other->camera_);
  std::swap(rendering_order_, other->rendering_order_);
  std::swap(opacity_, other->opacity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Node::GetTypeName() const {
  return "viro.Node";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// repeated float position = 1;
int Node::position_size() const {
  return position_.size();
}
void Node::clear_position() {
  position_.Clear();
}
float Node::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.position)
  return position_.Get(index);
}
void Node::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.position)
}
void Node::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.position)
}
const ::google::protobuf::RepeatedField< float >&
Node::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.position)
  return position_;
}
::google::protobuf::RepeatedField< float >*
Node::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.position)
  return &position_;
}

// repeated float scale = 2;
int Node::scale_size() const {
  return scale_.size();
}
void Node::clear_scale() {
  scale_.Clear();
}
float Node::scale(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.scale)
  return scale_.Get(index);
}
void Node::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.scale)
}
void Node::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.scale)
}
const ::google::protobuf::RepeatedField< float >&
Node::scale() const {
  // @@protoc_insertion_point(field_list:viro.Node.scale)
  return scale_;
}
::google::protobuf::RepeatedField< float >*
Node::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.scale)
  return &scale_;
}

// repeated float rotation = 3;
int Node::rotation_size() const {
  return rotation_.size();
}
void Node::clear_rotation() {
  rotation_.Clear();
}
float Node::rotation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.rotation)
  return rotation_.Get(index);
}
void Node::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.rotation)
}
void Node::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.rotation)
}
const ::google::protobuf::RepeatedField< float >&
Node::rotation() const {
  // @@protoc_insertion_point(field_list:viro.Node.rotation)
  return rotation_;
}
::google::protobuf::RepeatedField< float >*
Node::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.rotation)
  return &rotation_;
}

// int32 rendering_order = 4;
void Node::clear_rendering_order() {
  rendering_order_ = 0;
}
::google::protobuf::int32 Node::rendering_order() const {
  // @@protoc_insertion_point(field_get:viro.Node.rendering_order)
  return rendering_order_;
}
void Node::set_rendering_order(::google::protobuf::int32 value) {
  
  rendering_order_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.rendering_order)
}

// float opacity = 5;
void Node::clear_opacity() {
  opacity_ = 0;
}
float Node::opacity() const {
  // @@protoc_insertion_point(field_get:viro.Node.opacity)
  return opacity_;
}
void Node::set_opacity(float value) {
  
  opacity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.opacity)
}

// .viro.Node.Geometry geometry = 6;
bool Node::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
void Node::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
const ::viro::Node_Geometry& Node::geometry() const {
  // @@protoc_insertion_point(field_get:viro.Node.geometry)
  return geometry_ != NULL ? *geometry_
                         : *::viro::Node_Geometry::internal_default_instance();
}
::viro::Node_Geometry* Node::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::viro::Node_Geometry;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.geometry)
  return geometry_;
}
::viro::Node_Geometry* Node::release_geometry() {
  // @@protoc_insertion_point(field_release:viro.Node.geometry)
  
  ::viro::Node_Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
void Node::set_allocated_geometry(::viro::Node_Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.geometry)
}

// repeated .viro.Node.Light light = 7;
int Node::light_size() const {
  return light_.size();
}
void Node::clear_light() {
  light_.Clear();
}
const ::viro::Node_Light& Node::light(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.light)
  return light_.Get(index);
}
::viro::Node_Light* Node::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.light)
  return light_.Mutable(index);
}
::viro::Node_Light* Node::add_light() {
  // @@protoc_insertion_point(field_add:viro.Node.light)
  return light_.Add();
}
::google::protobuf::RepeatedPtrField< ::viro::Node_Light >*
Node::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.light)
  return &light_;
}
const ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >&
Node::light() const {
  // @@protoc_insertion_point(field_list:viro.Node.light)
  return light_;
}

// .viro.Node.Camera camera = 8;
bool Node::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
void Node::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
}
const ::viro::Node_Camera& Node::camera() const {
  // @@protoc_insertion_point(field_get:viro.Node.camera)
  return camera_ != NULL ? *camera_
                         : *::viro::Node_Camera::internal_default_instance();
}
::viro::Node_Camera* Node::mutable_camera() {
  
  if (camera_ == NULL) {
    camera_ = new ::viro::Node_Camera;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.camera)
  return camera_;
}
::viro::Node_Camera* Node::release_camera() {
  // @@protoc_insertion_point(field_release:viro.Node.camera)
  
  ::viro::Node_Camera* temp = camera_;
  camera_ = NULL;
  return temp;
}
void Node::set_allocated_camera(::viro::Node_Camera* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.camera)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace viro

// @@protoc_insertion_point(global_scope)
