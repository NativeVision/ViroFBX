// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nodes.proto

#ifndef PROTOBUF_Nodes_2eproto__INCLUDED
#define PROTOBUF_Nodes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace viro {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Node_Camera;
class Node_CameraDefaultTypeInternal;
extern Node_CameraDefaultTypeInternal _Node_Camera_default_instance_;
class Node_Geometry;
class Node_GeometryDefaultTypeInternal;
extern Node_GeometryDefaultTypeInternal _Node_Geometry_default_instance_;
class Node_Geometry_Element;
class Node_Geometry_ElementDefaultTypeInternal;
extern Node_Geometry_ElementDefaultTypeInternal _Node_Geometry_Element_default_instance_;
class Node_Geometry_Material;
class Node_Geometry_MaterialDefaultTypeInternal;
extern Node_Geometry_MaterialDefaultTypeInternal _Node_Geometry_Material_default_instance_;
class Node_Geometry_Material_Visual;
class Node_Geometry_Material_VisualDefaultTypeInternal;
extern Node_Geometry_Material_VisualDefaultTypeInternal _Node_Geometry_Material_Visual_default_instance_;
class Node_Geometry_Source;
class Node_Geometry_SourceDefaultTypeInternal;
extern Node_Geometry_SourceDefaultTypeInternal _Node_Geometry_Source_default_instance_;
class Node_Light;
class Node_LightDefaultTypeInternal;
extern Node_LightDefaultTypeInternal _Node_Light_default_instance_;
}  // namespace viro

namespace viro {

namespace protobuf_Nodes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Nodes_2eproto

enum Node_Geometry_Source_Semantic {
  Node_Geometry_Source_Semantic_Vertex = 0,
  Node_Geometry_Source_Semantic_Normal = 1,
  Node_Geometry_Source_Semantic_Color = 2,
  Node_Geometry_Source_Semantic_Texcoord = 3,
  Node_Geometry_Source_Semantic_Tangent = 4,
  Node_Geometry_Source_Semantic_VertexCrease = 5,
  Node_Geometry_Source_Semantic_EdgeCrease = 6,
  Node_Geometry_Source_Semantic_BoneWeights = 7,
  Node_Geometry_Source_Semantic_BoneIndices = 8,
  Node_Geometry_Source_Semantic_Node_Geometry_Source_Semantic_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Source_Semantic_Node_Geometry_Source_Semantic_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Source_Semantic_IsValid(int value);
const Node_Geometry_Source_Semantic Node_Geometry_Source_Semantic_Semantic_MIN = Node_Geometry_Source_Semantic_Vertex;
const Node_Geometry_Source_Semantic Node_Geometry_Source_Semantic_Semantic_MAX = Node_Geometry_Source_Semantic_BoneIndices;
const int Node_Geometry_Source_Semantic_Semantic_ARRAYSIZE = Node_Geometry_Source_Semantic_Semantic_MAX + 1;

enum Node_Geometry_Element_Primitive {
  Node_Geometry_Element_Primitive_Triangle = 0,
  Node_Geometry_Element_Primitive_TriangleStrip = 1,
  Node_Geometry_Element_Primitive_Line = 2,
  Node_Geometry_Element_Primitive_Point = 3,
  Node_Geometry_Element_Primitive_Node_Geometry_Element_Primitive_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Element_Primitive_Node_Geometry_Element_Primitive_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Element_Primitive_IsValid(int value);
const Node_Geometry_Element_Primitive Node_Geometry_Element_Primitive_Primitive_MIN = Node_Geometry_Element_Primitive_Triangle;
const Node_Geometry_Element_Primitive Node_Geometry_Element_Primitive_Primitive_MAX = Node_Geometry_Element_Primitive_Point;
const int Node_Geometry_Element_Primitive_Primitive_ARRAYSIZE = Node_Geometry_Element_Primitive_Primitive_MAX + 1;

enum Node_Geometry_Material_Visual_WrapMode {
  Node_Geometry_Material_Visual_WrapMode_Clamp = 0,
  Node_Geometry_Material_Visual_WrapMode_Repeat = 1,
  Node_Geometry_Material_Visual_WrapMode_ClampToBorder = 2,
  Node_Geometry_Material_Visual_WrapMode_Mirror = 3,
  Node_Geometry_Material_Visual_WrapMode_Node_Geometry_Material_Visual_WrapMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_Visual_WrapMode_Node_Geometry_Material_Visual_WrapMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_Visual_WrapMode_IsValid(int value);
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual_WrapMode_WrapMode_MIN = Node_Geometry_Material_Visual_WrapMode_Clamp;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual_WrapMode_WrapMode_MAX = Node_Geometry_Material_Visual_WrapMode_Mirror;
const int Node_Geometry_Material_Visual_WrapMode_WrapMode_ARRAYSIZE = Node_Geometry_Material_Visual_WrapMode_WrapMode_MAX + 1;

enum Node_Geometry_Material_Visual_FilterMode {
  Node_Geometry_Material_Visual_FilterMode_None = 0,
  Node_Geometry_Material_Visual_FilterMode_Nearest = 1,
  Node_Geometry_Material_Visual_FilterMode_Linear = 2,
  Node_Geometry_Material_Visual_FilterMode_Node_Geometry_Material_Visual_FilterMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_Visual_FilterMode_Node_Geometry_Material_Visual_FilterMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_Visual_FilterMode_IsValid(int value);
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual_FilterMode_FilterMode_MIN = Node_Geometry_Material_Visual_FilterMode_None;
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual_FilterMode_FilterMode_MAX = Node_Geometry_Material_Visual_FilterMode_Linear;
const int Node_Geometry_Material_Visual_FilterMode_FilterMode_ARRAYSIZE = Node_Geometry_Material_Visual_FilterMode_FilterMode_MAX + 1;

enum Node_Geometry_Material_LightingModel {
  Node_Geometry_Material_LightingModel_Constant = 0,
  Node_Geometry_Material_LightingModel_Lambert = 1,
  Node_Geometry_Material_LightingModel_Blinn = 2,
  Node_Geometry_Material_LightingModel_Phong = 3,
  Node_Geometry_Material_LightingModel_Node_Geometry_Material_LightingModel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_LightingModel_Node_Geometry_Material_LightingModel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_LightingModel_IsValid(int value);
const Node_Geometry_Material_LightingModel Node_Geometry_Material_LightingModel_LightingModel_MIN = Node_Geometry_Material_LightingModel_Constant;
const Node_Geometry_Material_LightingModel Node_Geometry_Material_LightingModel_LightingModel_MAX = Node_Geometry_Material_LightingModel_Phong;
const int Node_Geometry_Material_LightingModel_LightingModel_ARRAYSIZE = Node_Geometry_Material_LightingModel_LightingModel_MAX + 1;

enum Node_Geometry_Material_CullMode {
  Node_Geometry_Material_CullMode_Back = 0,
  Node_Geometry_Material_CullMode_Front = 1,
  Node_Geometry_Material_CullMode_None = 2,
  Node_Geometry_Material_CullMode_Node_Geometry_Material_CullMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_CullMode_Node_Geometry_Material_CullMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_CullMode_IsValid(int value);
const Node_Geometry_Material_CullMode Node_Geometry_Material_CullMode_CullMode_MIN = Node_Geometry_Material_CullMode_Back;
const Node_Geometry_Material_CullMode Node_Geometry_Material_CullMode_CullMode_MAX = Node_Geometry_Material_CullMode_None;
const int Node_Geometry_Material_CullMode_CullMode_ARRAYSIZE = Node_Geometry_Material_CullMode_CullMode_MAX + 1;

enum Node_Geometry_Material_BlendMode {
  Node_Geometry_Material_BlendMode_Alpha = 0,
  Node_Geometry_Material_BlendMode_Add = 1,
  Node_Geometry_Material_BlendMode_Subtract = 2,
  Node_Geometry_Material_BlendMode_Multiply = 3,
  Node_Geometry_Material_BlendMode_Screen = 4,
  Node_Geometry_Material_BlendMode_Replace = 5,
  Node_Geometry_Material_BlendMode_Node_Geometry_Material_BlendMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_BlendMode_Node_Geometry_Material_BlendMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_BlendMode_IsValid(int value);
const Node_Geometry_Material_BlendMode Node_Geometry_Material_BlendMode_BlendMode_MIN = Node_Geometry_Material_BlendMode_Alpha;
const Node_Geometry_Material_BlendMode Node_Geometry_Material_BlendMode_BlendMode_MAX = Node_Geometry_Material_BlendMode_Replace;
const int Node_Geometry_Material_BlendMode_BlendMode_ARRAYSIZE = Node_Geometry_Material_BlendMode_BlendMode_MAX + 1;

enum Node_Light_LightType {
  Node_Light_LightType_Ambient = 0,
  Node_Light_LightType_Directional = 1,
  Node_Light_LightType_Omni = 2,
  Node_Light_LightType_Spot = 3,
  Node_Light_LightType_Node_Light_LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Light_LightType_Node_Light_LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Light_LightType_IsValid(int value);
const Node_Light_LightType Node_Light_LightType_LightType_MIN = Node_Light_LightType_Ambient;
const Node_Light_LightType Node_Light_LightType_LightType_MAX = Node_Light_LightType_Spot;
const int Node_Light_LightType_LightType_ARRAYSIZE = Node_Light_LightType_LightType_MAX + 1;

// ===================================================================

class Node_Geometry_Source : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Source) */ {
 public:
  Node_Geometry_Source();
  virtual ~Node_Geometry_Source();

  Node_Geometry_Source(const Node_Geometry_Source& from);

  inline Node_Geometry_Source& operator=(const Node_Geometry_Source& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Source& default_instance();

  static inline const Node_Geometry_Source* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Source*>(
               &_Node_Geometry_Source_default_instance_);
  }

  void Swap(Node_Geometry_Source* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Source* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Source* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Source& from);
  void MergeFrom(const Node_Geometry_Source& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Source_Semantic Semantic;
  static const Semantic Vertex =
    Node_Geometry_Source_Semantic_Vertex;
  static const Semantic Normal =
    Node_Geometry_Source_Semantic_Normal;
  static const Semantic Color =
    Node_Geometry_Source_Semantic_Color;
  static const Semantic Texcoord =
    Node_Geometry_Source_Semantic_Texcoord;
  static const Semantic Tangent =
    Node_Geometry_Source_Semantic_Tangent;
  static const Semantic VertexCrease =
    Node_Geometry_Source_Semantic_VertexCrease;
  static const Semantic EdgeCrease =
    Node_Geometry_Source_Semantic_EdgeCrease;
  static const Semantic BoneWeights =
    Node_Geometry_Source_Semantic_BoneWeights;
  static const Semantic BoneIndices =
    Node_Geometry_Source_Semantic_BoneIndices;
  static inline bool Semantic_IsValid(int value) {
    return Node_Geometry_Source_Semantic_IsValid(value);
  }
  static const Semantic Semantic_MIN =
    Node_Geometry_Source_Semantic_Semantic_MIN;
  static const Semantic Semantic_MAX =
    Node_Geometry_Source_Semantic_Semantic_MAX;
  static const int Semantic_ARRAYSIZE =
    Node_Geometry_Source_Semantic_Semantic_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .viro.Node.Geometry.Source.Semantic semantic = 2;
  void clear_semantic();
  static const int kSemanticFieldNumber = 2;
  ::viro::Node_Geometry_Source_Semantic semantic() const;
  void set_semantic(::viro::Node_Geometry_Source_Semantic value);

  // uint32 vertex_count = 3;
  void clear_vertex_count();
  static const int kVertexCountFieldNumber = 3;
  ::google::protobuf::uint32 vertex_count() const;
  void set_vertex_count(::google::protobuf::uint32 value);

  // bool float_components = 4;
  void clear_float_components();
  static const int kFloatComponentsFieldNumber = 4;
  bool float_components() const;
  void set_float_components(bool value);

  // uint32 components_per_vertex = 5;
  void clear_components_per_vertex();
  static const int kComponentsPerVertexFieldNumber = 5;
  ::google::protobuf::uint32 components_per_vertex() const;
  void set_components_per_vertex(::google::protobuf::uint32 value);

  // uint32 bytes_per_component = 6;
  void clear_bytes_per_component();
  static const int kBytesPerComponentFieldNumber = 6;
  ::google::protobuf::uint32 bytes_per_component() const;
  void set_bytes_per_component(::google::protobuf::uint32 value);

  // uint32 data_offset = 7;
  void clear_data_offset();
  static const int kDataOffsetFieldNumber = 7;
  ::google::protobuf::uint32 data_offset() const;
  void set_data_offset(::google::protobuf::uint32 value);

  // uint32 data_stride = 8;
  void clear_data_stride();
  static const int kDataStrideFieldNumber = 8;
  ::google::protobuf::uint32 data_stride() const;
  void set_data_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Source)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int semantic_;
  ::google::protobuf::uint32 vertex_count_;
  bool float_components_;
  ::google::protobuf::uint32 components_per_vertex_;
  ::google::protobuf::uint32 bytes_per_component_;
  ::google::protobuf::uint32 data_offset_;
  ::google::protobuf::uint32 data_stride_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Element : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Element) */ {
 public:
  Node_Geometry_Element();
  virtual ~Node_Geometry_Element();

  Node_Geometry_Element(const Node_Geometry_Element& from);

  inline Node_Geometry_Element& operator=(const Node_Geometry_Element& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Element& default_instance();

  static inline const Node_Geometry_Element* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Element*>(
               &_Node_Geometry_Element_default_instance_);
  }

  void Swap(Node_Geometry_Element* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Element* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Element* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Element& from);
  void MergeFrom(const Node_Geometry_Element& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Element_Primitive Primitive;
  static const Primitive Triangle =
    Node_Geometry_Element_Primitive_Triangle;
  static const Primitive TriangleStrip =
    Node_Geometry_Element_Primitive_TriangleStrip;
  static const Primitive Line =
    Node_Geometry_Element_Primitive_Line;
  static const Primitive Point =
    Node_Geometry_Element_Primitive_Point;
  static inline bool Primitive_IsValid(int value) {
    return Node_Geometry_Element_Primitive_IsValid(value);
  }
  static const Primitive Primitive_MIN =
    Node_Geometry_Element_Primitive_Primitive_MIN;
  static const Primitive Primitive_MAX =
    Node_Geometry_Element_Primitive_Primitive_MAX;
  static const int Primitive_ARRAYSIZE =
    Node_Geometry_Element_Primitive_Primitive_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .viro.Node.Geometry.Element.Primitive primitive = 2;
  void clear_primitive();
  static const int kPrimitiveFieldNumber = 2;
  ::viro::Node_Geometry_Element_Primitive primitive() const;
  void set_primitive(::viro::Node_Geometry_Element_Primitive value);

  // uint32 primitive_count = 3;
  void clear_primitive_count();
  static const int kPrimitiveCountFieldNumber = 3;
  ::google::protobuf::uint32 primitive_count() const;
  void set_primitive_count(::google::protobuf::uint32 value);

  // uint32 bytes_per_index = 4;
  void clear_bytes_per_index();
  static const int kBytesPerIndexFieldNumber = 4;
  ::google::protobuf::uint32 bytes_per_index() const;
  void set_bytes_per_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Element)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int primitive_;
  ::google::protobuf::uint32 primitive_count_;
  ::google::protobuf::uint32 bytes_per_index_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Material_Visual : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Material.Visual) */ {
 public:
  Node_Geometry_Material_Visual();
  virtual ~Node_Geometry_Material_Visual();

  Node_Geometry_Material_Visual(const Node_Geometry_Material_Visual& from);

  inline Node_Geometry_Material_Visual& operator=(const Node_Geometry_Material_Visual& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Material_Visual& default_instance();

  static inline const Node_Geometry_Material_Visual* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Material_Visual*>(
               &_Node_Geometry_Material_Visual_default_instance_);
  }

  void Swap(Node_Geometry_Material_Visual* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Material_Visual* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Material_Visual* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Material_Visual& from);
  void MergeFrom(const Node_Geometry_Material_Visual& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Material_Visual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Material_Visual_WrapMode WrapMode;
  static const WrapMode Clamp =
    Node_Geometry_Material_Visual_WrapMode_Clamp;
  static const WrapMode Repeat =
    Node_Geometry_Material_Visual_WrapMode_Repeat;
  static const WrapMode ClampToBorder =
    Node_Geometry_Material_Visual_WrapMode_ClampToBorder;
  static const WrapMode Mirror =
    Node_Geometry_Material_Visual_WrapMode_Mirror;
  static inline bool WrapMode_IsValid(int value) {
    return Node_Geometry_Material_Visual_WrapMode_IsValid(value);
  }
  static const WrapMode WrapMode_MIN =
    Node_Geometry_Material_Visual_WrapMode_WrapMode_MIN;
  static const WrapMode WrapMode_MAX =
    Node_Geometry_Material_Visual_WrapMode_WrapMode_MAX;
  static const int WrapMode_ARRAYSIZE =
    Node_Geometry_Material_Visual_WrapMode_WrapMode_ARRAYSIZE;

  typedef Node_Geometry_Material_Visual_FilterMode FilterMode;
  static const FilterMode None =
    Node_Geometry_Material_Visual_FilterMode_None;
  static const FilterMode Nearest =
    Node_Geometry_Material_Visual_FilterMode_Nearest;
  static const FilterMode Linear =
    Node_Geometry_Material_Visual_FilterMode_Linear;
  static inline bool FilterMode_IsValid(int value) {
    return Node_Geometry_Material_Visual_FilterMode_IsValid(value);
  }
  static const FilterMode FilterMode_MIN =
    Node_Geometry_Material_Visual_FilterMode_FilterMode_MIN;
  static const FilterMode FilterMode_MAX =
    Node_Geometry_Material_Visual_FilterMode_FilterMode_MAX;
  static const int FilterMode_ARRAYSIZE =
    Node_Geometry_Material_Visual_FilterMode_FilterMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated float color = 1;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  float color(int index) const;
  void set_color(int index, float value);
  void add_color(float value);
  const ::google::protobuf::RepeatedField< float >&
      color() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_color();

  // repeated float transform = 4;
  int transform_size() const;
  void clear_transform();
  static const int kTransformFieldNumber = 4;
  float transform(int index) const;
  void set_transform(int index, float value);
  void add_transform(float value);
  const ::google::protobuf::RepeatedField< float >&
      transform() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_transform();

  // string texture = 2;
  void clear_texture();
  static const int kTextureFieldNumber = 2;
  const ::std::string& texture() const;
  void set_texture(const ::std::string& value);
  #if LANG_CXX11
  void set_texture(::std::string&& value);
  #endif
  void set_texture(const char* value);
  void set_texture(const char* value, size_t size);
  ::std::string* mutable_texture();
  ::std::string* release_texture();
  void set_allocated_texture(::std::string* texture);

  // float intensity = 3;
  void clear_intensity();
  static const int kIntensityFieldNumber = 3;
  float intensity() const;
  void set_intensity(float value);

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
  void clear_wrap_mode_s();
  static const int kWrapModeSFieldNumber = 5;
  ::viro::Node_Geometry_Material_Visual_WrapMode wrap_mode_s() const;
  void set_wrap_mode_s(::viro::Node_Geometry_Material_Visual_WrapMode value);

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
  void clear_wrap_mode_t();
  static const int kWrapModeTFieldNumber = 6;
  ::viro::Node_Geometry_Material_Visual_WrapMode wrap_mode_t() const;
  void set_wrap_mode_t(::viro::Node_Geometry_Material_Visual_WrapMode value);

  // .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
  void clear_minification_filter();
  static const int kMinificationFilterFieldNumber = 7;
  ::viro::Node_Geometry_Material_Visual_FilterMode minification_filter() const;
  void set_minification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value);

  // .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
  void clear_magnification_filter();
  static const int kMagnificationFilterFieldNumber = 8;
  ::viro::Node_Geometry_Material_Visual_FilterMode magnification_filter() const;
  void set_magnification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value);

  // .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
  void clear_mip_filter();
  static const int kMipFilterFieldNumber = 9;
  ::viro::Node_Geometry_Material_Visual_FilterMode mip_filter() const;
  void set_mip_filter(::viro::Node_Geometry_Material_Visual_FilterMode value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Material.Visual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > color_;
  mutable int _color_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > transform_;
  mutable int _transform_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr texture_;
  float intensity_;
  int wrap_mode_s_;
  int wrap_mode_t_;
  int minification_filter_;
  int magnification_filter_;
  int mip_filter_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Material : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Material) */ {
 public:
  Node_Geometry_Material();
  virtual ~Node_Geometry_Material();

  Node_Geometry_Material(const Node_Geometry_Material& from);

  inline Node_Geometry_Material& operator=(const Node_Geometry_Material& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Material& default_instance();

  static inline const Node_Geometry_Material* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Material*>(
               &_Node_Geometry_Material_default_instance_);
  }

  void Swap(Node_Geometry_Material* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Material* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Material& from);
  void MergeFrom(const Node_Geometry_Material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Material_Visual Visual;

  typedef Node_Geometry_Material_LightingModel LightingModel;
  static const LightingModel Constant =
    Node_Geometry_Material_LightingModel_Constant;
  static const LightingModel Lambert =
    Node_Geometry_Material_LightingModel_Lambert;
  static const LightingModel Blinn =
    Node_Geometry_Material_LightingModel_Blinn;
  static const LightingModel Phong =
    Node_Geometry_Material_LightingModel_Phong;
  static inline bool LightingModel_IsValid(int value) {
    return Node_Geometry_Material_LightingModel_IsValid(value);
  }
  static const LightingModel LightingModel_MIN =
    Node_Geometry_Material_LightingModel_LightingModel_MIN;
  static const LightingModel LightingModel_MAX =
    Node_Geometry_Material_LightingModel_LightingModel_MAX;
  static const int LightingModel_ARRAYSIZE =
    Node_Geometry_Material_LightingModel_LightingModel_ARRAYSIZE;

  typedef Node_Geometry_Material_CullMode CullMode;
  static const CullMode Back =
    Node_Geometry_Material_CullMode_Back;
  static const CullMode Front =
    Node_Geometry_Material_CullMode_Front;
  static const CullMode None =
    Node_Geometry_Material_CullMode_None;
  static inline bool CullMode_IsValid(int value) {
    return Node_Geometry_Material_CullMode_IsValid(value);
  }
  static const CullMode CullMode_MIN =
    Node_Geometry_Material_CullMode_CullMode_MIN;
  static const CullMode CullMode_MAX =
    Node_Geometry_Material_CullMode_CullMode_MAX;
  static const int CullMode_ARRAYSIZE =
    Node_Geometry_Material_CullMode_CullMode_ARRAYSIZE;

  typedef Node_Geometry_Material_BlendMode BlendMode;
  static const BlendMode Alpha =
    Node_Geometry_Material_BlendMode_Alpha;
  static const BlendMode Add =
    Node_Geometry_Material_BlendMode_Add;
  static const BlendMode Subtract =
    Node_Geometry_Material_BlendMode_Subtract;
  static const BlendMode Multiply =
    Node_Geometry_Material_BlendMode_Multiply;
  static const BlendMode Screen =
    Node_Geometry_Material_BlendMode_Screen;
  static const BlendMode Replace =
    Node_Geometry_Material_BlendMode_Replace;
  static inline bool BlendMode_IsValid(int value) {
    return Node_Geometry_Material_BlendMode_IsValid(value);
  }
  static const BlendMode BlendMode_MIN =
    Node_Geometry_Material_BlendMode_BlendMode_MIN;
  static const BlendMode BlendMode_MAX =
    Node_Geometry_Material_BlendMode_BlendMode_MAX;
  static const int BlendMode_ARRAYSIZE =
    Node_Geometry_Material_BlendMode_BlendMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .viro.Node.Geometry.Material.Visual visual = 11;
  int visual_size() const;
  void clear_visual();
  static const int kVisualFieldNumber = 11;
  const ::viro::Node_Geometry_Material_Visual& visual(int index) const;
  ::viro::Node_Geometry_Material_Visual* mutable_visual(int index);
  ::viro::Node_Geometry_Material_Visual* add_visual();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material_Visual >*
      mutable_visual();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material_Visual >&
      visual() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float shininess = 2;
  void clear_shininess();
  static const int kShininessFieldNumber = 2;
  float shininess() const;
  void set_shininess(float value);

  // float fresnel_exponent = 3;
  void clear_fresnel_exponent();
  static const int kFresnelExponentFieldNumber = 3;
  float fresnel_exponent() const;
  void set_fresnel_exponent(float value);

  // float transparency = 4;
  void clear_transparency();
  static const int kTransparencyFieldNumber = 4;
  float transparency() const;
  void set_transparency(float value);

  // .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
  void clear_lighting_model();
  static const int kLightingModelFieldNumber = 5;
  ::viro::Node_Geometry_Material_LightingModel lighting_model() const;
  void set_lighting_model(::viro::Node_Geometry_Material_LightingModel value);

  // .viro.Node.Geometry.Material.CullMode cull_mode = 7;
  void clear_cull_mode();
  static const int kCullModeFieldNumber = 7;
  ::viro::Node_Geometry_Material_CullMode cull_mode() const;
  void set_cull_mode(::viro::Node_Geometry_Material_CullMode value);

  // .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
  void clear_blend_mode();
  static const int kBlendModeFieldNumber = 8;
  ::viro::Node_Geometry_Material_BlendMode blend_mode() const;
  void set_blend_mode(::viro::Node_Geometry_Material_BlendMode value);

  // bool lit_per_pixel = 6;
  void clear_lit_per_pixel();
  static const int kLitPerPixelFieldNumber = 6;
  bool lit_per_pixel() const;
  void set_lit_per_pixel(bool value);

  // bool reads_from_depth_buffer = 9;
  void clear_reads_from_depth_buffer();
  static const int kReadsFromDepthBufferFieldNumber = 9;
  bool reads_from_depth_buffer() const;
  void set_reads_from_depth_buffer(bool value);

  // bool writes_to_depth_buffer = 10;
  void clear_writes_to_depth_buffer();
  static const int kWritesToDepthBufferFieldNumber = 10;
  bool writes_to_depth_buffer() const;
  void set_writes_to_depth_buffer(bool value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material_Visual > visual_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float shininess_;
  float fresnel_exponent_;
  float transparency_;
  int lighting_model_;
  int cull_mode_;
  int blend_mode_;
  bool lit_per_pixel_;
  bool reads_from_depth_buffer_;
  bool writes_to_depth_buffer_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry) */ {
 public:
  Node_Geometry();
  virtual ~Node_Geometry();

  Node_Geometry(const Node_Geometry& from);

  inline Node_Geometry& operator=(const Node_Geometry& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry& default_instance();

  static inline const Node_Geometry* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry*>(
               &_Node_Geometry_default_instance_);
  }

  void Swap(Node_Geometry* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry& from);
  void MergeFrom(const Node_Geometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Source Source;
  typedef Node_Geometry_Element Element;
  typedef Node_Geometry_Material Material;

  // accessors -------------------------------------------------------

  // repeated .viro.Node.Geometry.Source source = 2;
  int source_size() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::viro::Node_Geometry_Source& source(int index) const;
  ::viro::Node_Geometry_Source* mutable_source(int index);
  ::viro::Node_Geometry_Source* add_source();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >*
      mutable_source();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >&
      source() const;

  // repeated .viro.Node.Geometry.Element element = 3;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 3;
  const ::viro::Node_Geometry_Element& element(int index) const;
  ::viro::Node_Geometry_Element* mutable_element(int index);
  ::viro::Node_Geometry_Element* add_element();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >&
      element() const;

  // repeated .viro.Node.Geometry.Material material = 4;
  int material_size() const;
  void clear_material();
  static const int kMaterialFieldNumber = 4;
  const ::viro::Node_Geometry_Material& material(int index) const;
  ::viro::Node_Geometry_Material* mutable_material(int index);
  ::viro::Node_Geometry_Material* add_material();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >*
      mutable_material();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >&
      material() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source > source_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element > element_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material > material_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Light : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Light) */ {
 public:
  Node_Light();
  virtual ~Node_Light();

  Node_Light(const Node_Light& from);

  inline Node_Light& operator=(const Node_Light& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Light& default_instance();

  static inline const Node_Light* internal_default_instance() {
    return reinterpret_cast<const Node_Light*>(
               &_Node_Light_default_instance_);
  }

  void Swap(Node_Light* other);

  // implements Message ----------------------------------------------

  inline Node_Light* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Light* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Light& from);
  void MergeFrom(const Node_Light& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Light* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Light_LightType LightType;
  static const LightType Ambient =
    Node_Light_LightType_Ambient;
  static const LightType Directional =
    Node_Light_LightType_Directional;
  static const LightType Omni =
    Node_Light_LightType_Omni;
  static const LightType Spot =
    Node_Light_LightType_Spot;
  static inline bool LightType_IsValid(int value) {
    return Node_Light_LightType_IsValid(value);
  }
  static const LightType LightType_MIN =
    Node_Light_LightType_LightType_MIN;
  static const LightType LightType_MAX =
    Node_Light_LightType_LightType_MAX;
  static const int LightType_ARRAYSIZE =
    Node_Light_LightType_LightType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated float color = 3;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  float color(int index) const;
  void set_color(int index, float value);
  void add_color(float value);
  const ::google::protobuf::RepeatedField< float >&
      color() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_color();

  // repeated float position = 4;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // repeated float direction = 5;
  int direction_size() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  float direction(int index) const;
  void set_direction(int index, float value);
  void add_direction(float value);
  const ::google::protobuf::RepeatedField< float >&
      direction() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_direction();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .viro.Node.Light.LightType light_type = 2;
  void clear_light_type();
  static const int kLightTypeFieldNumber = 2;
  ::viro::Node_Light_LightType light_type() const;
  void set_light_type(::viro::Node_Light_LightType value);

  // float intensity = 6;
  void clear_intensity();
  static const int kIntensityFieldNumber = 6;
  float intensity() const;
  void set_intensity(float value);

  // float temperature = 7;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 7;
  float temperature() const;
  void set_temperature(float value);

  // float attenuation_start = 8;
  void clear_attenuation_start();
  static const int kAttenuationStartFieldNumber = 8;
  float attenuation_start() const;
  void set_attenuation_start(float value);

  // float attenuation_end = 9;
  void clear_attenuation_end();
  static const int kAttenuationEndFieldNumber = 9;
  float attenuation_end() const;
  void set_attenuation_end(float value);

  // float attenuation_falloff_exponent = 10;
  void clear_attenuation_falloff_exponent();
  static const int kAttenuationFalloffExponentFieldNumber = 10;
  float attenuation_falloff_exponent() const;
  void set_attenuation_falloff_exponent(float value);

  // float spot_inner_angle = 11;
  void clear_spot_inner_angle();
  static const int kSpotInnerAngleFieldNumber = 11;
  float spot_inner_angle() const;
  void set_spot_inner_angle(float value);

  // float spot_outer_angle = 12;
  void clear_spot_outer_angle();
  static const int kSpotOuterAngleFieldNumber = 12;
  float spot_outer_angle() const;
  void set_spot_outer_angle(float value);

  // @@protoc_insertion_point(class_scope:viro.Node.Light)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > color_;
  mutable int _color_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > direction_;
  mutable int _direction_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int light_type_;
  float intensity_;
  float temperature_;
  float attenuation_start_;
  float attenuation_end_;
  float attenuation_falloff_exponent_;
  float spot_inner_angle_;
  float spot_outer_angle_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Camera : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Camera) */ {
 public:
  Node_Camera();
  virtual ~Node_Camera();

  Node_Camera(const Node_Camera& from);

  inline Node_Camera& operator=(const Node_Camera& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Camera& default_instance();

  static inline const Node_Camera* internal_default_instance() {
    return reinterpret_cast<const Node_Camera*>(
               &_Node_Camera_default_instance_);
  }

  void Swap(Node_Camera* other);

  // implements Message ----------------------------------------------

  inline Node_Camera* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Camera* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Camera& from);
  void MergeFrom(const Node_Camera& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float position = 1;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // @@protoc_insertion_point(class_scope:viro.Node.Camera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry Geometry;
  typedef Node_Light Light;
  typedef Node_Camera Camera;

  // accessors -------------------------------------------------------

  // repeated float position = 1;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // repeated float scale = 2;
  int scale_size() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::google::protobuf::RepeatedField< float >&
      scale() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scale();

  // repeated float rotation = 3;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::google::protobuf::RepeatedField< float >&
      rotation() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rotation();

  // repeated .viro.Node.Light light = 7;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 7;
  const ::viro::Node_Light& light(int index) const;
  ::viro::Node_Light* mutable_light(int index);
  ::viro::Node_Light* add_light();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >*
      mutable_light();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >&
      light() const;

  // .viro.Node.Geometry geometry = 6;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 6;
  const ::viro::Node_Geometry& geometry() const;
  ::viro::Node_Geometry* mutable_geometry();
  ::viro::Node_Geometry* release_geometry();
  void set_allocated_geometry(::viro::Node_Geometry* geometry);

  // .viro.Node.Camera camera = 8;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 8;
  const ::viro::Node_Camera& camera() const;
  ::viro::Node_Camera* mutable_camera();
  ::viro::Node_Camera* release_camera();
  void set_allocated_camera(::viro::Node_Camera* camera);

  // int32 rendering_order = 4;
  void clear_rendering_order();
  static const int kRenderingOrderFieldNumber = 4;
  ::google::protobuf::int32 rendering_order() const;
  void set_rendering_order(::google::protobuf::int32 value);

  // float opacity = 5;
  void clear_opacity();
  static const int kOpacityFieldNumber = 5;
  float opacity() const;
  void set_opacity(float value);

  // @@protoc_insertion_point(class_scope:viro.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > scale_;
  mutable int _scale_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rotation_;
  mutable int _rotation_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Light > light_;
  ::viro::Node_Geometry* geometry_;
  ::viro::Node_Camera* camera_;
  ::google::protobuf::int32 rendering_order_;
  float opacity_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Geometry_Source

// bytes data = 1;
inline void Node_Geometry_Source::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Source::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data)
  return data_.GetNoArena();
}
inline void Node_Geometry_Source::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data)
}
#if LANG_CXX11
inline void Node_Geometry_Source::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Source.data)
}
#endif
inline void Node_Geometry_Source::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Source.data)
}
inline void Node_Geometry_Source::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Source.data)
}
inline ::std::string* Node_Geometry_Source::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Source.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Source::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Source.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Source::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Source.data)
}

// .viro.Node.Geometry.Source.Semantic semantic = 2;
inline void Node_Geometry_Source::clear_semantic() {
  semantic_ = 0;
}
inline ::viro::Node_Geometry_Source_Semantic Node_Geometry_Source::semantic() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.semantic)
  return static_cast< ::viro::Node_Geometry_Source_Semantic >(semantic_);
}
inline void Node_Geometry_Source::set_semantic(::viro::Node_Geometry_Source_Semantic value) {
  
  semantic_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.semantic)
}

// uint32 vertex_count = 3;
inline void Node_Geometry_Source::clear_vertex_count() {
  vertex_count_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::vertex_count() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.vertex_count)
  return vertex_count_;
}
inline void Node_Geometry_Source::set_vertex_count(::google::protobuf::uint32 value) {
  
  vertex_count_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.vertex_count)
}

// bool float_components = 4;
inline void Node_Geometry_Source::clear_float_components() {
  float_components_ = false;
}
inline bool Node_Geometry_Source::float_components() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.float_components)
  return float_components_;
}
inline void Node_Geometry_Source::set_float_components(bool value) {
  
  float_components_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.float_components)
}

// uint32 components_per_vertex = 5;
inline void Node_Geometry_Source::clear_components_per_vertex() {
  components_per_vertex_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::components_per_vertex() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.components_per_vertex)
  return components_per_vertex_;
}
inline void Node_Geometry_Source::set_components_per_vertex(::google::protobuf::uint32 value) {
  
  components_per_vertex_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.components_per_vertex)
}

// uint32 bytes_per_component = 6;
inline void Node_Geometry_Source::clear_bytes_per_component() {
  bytes_per_component_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::bytes_per_component() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.bytes_per_component)
  return bytes_per_component_;
}
inline void Node_Geometry_Source::set_bytes_per_component(::google::protobuf::uint32 value) {
  
  bytes_per_component_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.bytes_per_component)
}

// uint32 data_offset = 7;
inline void Node_Geometry_Source::clear_data_offset() {
  data_offset_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::data_offset() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data_offset)
  return data_offset_;
}
inline void Node_Geometry_Source::set_data_offset(::google::protobuf::uint32 value) {
  
  data_offset_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data_offset)
}

// uint32 data_stride = 8;
inline void Node_Geometry_Source::clear_data_stride() {
  data_stride_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::data_stride() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data_stride)
  return data_stride_;
}
inline void Node_Geometry_Source::set_data_stride(::google::protobuf::uint32 value) {
  
  data_stride_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data_stride)
}

// -------------------------------------------------------------------

// Node_Geometry_Element

// bytes data = 1;
inline void Node_Geometry_Element::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Element::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.data)
  return data_.GetNoArena();
}
inline void Node_Geometry_Element::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.data)
}
#if LANG_CXX11
inline void Node_Geometry_Element::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Element.data)
}
#endif
inline void Node_Geometry_Element::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Element.data)
}
inline void Node_Geometry_Element::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Element.data)
}
inline ::std::string* Node_Geometry_Element::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Element.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Element::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Element.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Element::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Element.data)
}

// .viro.Node.Geometry.Element.Primitive primitive = 2;
inline void Node_Geometry_Element::clear_primitive() {
  primitive_ = 0;
}
inline ::viro::Node_Geometry_Element_Primitive Node_Geometry_Element::primitive() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.primitive)
  return static_cast< ::viro::Node_Geometry_Element_Primitive >(primitive_);
}
inline void Node_Geometry_Element::set_primitive(::viro::Node_Geometry_Element_Primitive value) {
  
  primitive_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.primitive)
}

// uint32 primitive_count = 3;
inline void Node_Geometry_Element::clear_primitive_count() {
  primitive_count_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Element::primitive_count() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.primitive_count)
  return primitive_count_;
}
inline void Node_Geometry_Element::set_primitive_count(::google::protobuf::uint32 value) {
  
  primitive_count_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.primitive_count)
}

// uint32 bytes_per_index = 4;
inline void Node_Geometry_Element::clear_bytes_per_index() {
  bytes_per_index_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Element::bytes_per_index() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.bytes_per_index)
  return bytes_per_index_;
}
inline void Node_Geometry_Element::set_bytes_per_index(::google::protobuf::uint32 value) {
  
  bytes_per_index_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.bytes_per_index)
}

// -------------------------------------------------------------------

// Node_Geometry_Material_Visual

// repeated float color = 1;
inline int Node_Geometry_Material_Visual::color_size() const {
  return color_.size();
}
inline void Node_Geometry_Material_Visual::clear_color() {
  color_.Clear();
}
inline float Node_Geometry_Material_Visual::color(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.color)
  return color_.Get(index);
}
inline void Node_Geometry_Material_Visual::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.color)
}
inline void Node_Geometry_Material_Visual::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.Visual.color)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Geometry_Material_Visual::color() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.Visual.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Geometry_Material_Visual::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.Visual.color)
  return &color_;
}

// string texture = 2;
inline void Node_Geometry_Material_Visual::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Material_Visual::texture() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.texture)
  return texture_.GetNoArena();
}
inline void Node_Geometry_Material_Visual::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.texture)
}
#if LANG_CXX11
inline void Node_Geometry_Material_Visual::set_texture(::std::string&& value) {
  
  texture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Material.Visual.texture)
}
#endif
inline void Node_Geometry_Material_Visual::set_texture(const char* value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Material.Visual.texture)
}
inline void Node_Geometry_Material_Visual::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Material.Visual.texture)
}
inline ::std::string* Node_Geometry_Material_Visual::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.Visual.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Material_Visual::release_texture() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.Visual.texture)
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Material_Visual::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.Visual.texture)
}

// float intensity = 3;
inline void Node_Geometry_Material_Visual::clear_intensity() {
  intensity_ = 0;
}
inline float Node_Geometry_Material_Visual::intensity() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.intensity)
  return intensity_;
}
inline void Node_Geometry_Material_Visual::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.intensity)
}

// repeated float transform = 4;
inline int Node_Geometry_Material_Visual::transform_size() const {
  return transform_.size();
}
inline void Node_Geometry_Material_Visual::clear_transform() {
  transform_.Clear();
}
inline float Node_Geometry_Material_Visual::transform(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.transform)
  return transform_.Get(index);
}
inline void Node_Geometry_Material_Visual::set_transform(int index, float value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.transform)
}
inline void Node_Geometry_Material_Visual::add_transform(float value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.Visual.transform)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Geometry_Material_Visual::transform() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.Visual.transform)
  return transform_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Geometry_Material_Visual::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.Visual.transform)
  return &transform_;
}

// .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
inline void Node_Geometry_Material_Visual::clear_wrap_mode_s() {
  wrap_mode_s_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::wrap_mode_s() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.wrap_mode_s)
  return static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(wrap_mode_s_);
}
inline void Node_Geometry_Material_Visual::set_wrap_mode_s(::viro::Node_Geometry_Material_Visual_WrapMode value) {
  
  wrap_mode_s_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.wrap_mode_s)
}

// .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
inline void Node_Geometry_Material_Visual::clear_wrap_mode_t() {
  wrap_mode_t_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::wrap_mode_t() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.wrap_mode_t)
  return static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(wrap_mode_t_);
}
inline void Node_Geometry_Material_Visual::set_wrap_mode_t(::viro::Node_Geometry_Material_Visual_WrapMode value) {
  
  wrap_mode_t_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.wrap_mode_t)
}

// .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
inline void Node_Geometry_Material_Visual::clear_minification_filter() {
  minification_filter_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::minification_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.minification_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(minification_filter_);
}
inline void Node_Geometry_Material_Visual::set_minification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  minification_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.minification_filter)
}

// .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
inline void Node_Geometry_Material_Visual::clear_magnification_filter() {
  magnification_filter_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::magnification_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.magnification_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(magnification_filter_);
}
inline void Node_Geometry_Material_Visual::set_magnification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  magnification_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.magnification_filter)
}

// .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
inline void Node_Geometry_Material_Visual::clear_mip_filter() {
  mip_filter_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::mip_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.mip_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(mip_filter_);
}
inline void Node_Geometry_Material_Visual::set_mip_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  mip_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.mip_filter)
}

// -------------------------------------------------------------------

// Node_Geometry_Material

// string name = 1;
inline void Node_Geometry_Material::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Material::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.name)
  return name_.GetNoArena();
}
inline void Node_Geometry_Material::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.name)
}
#if LANG_CXX11
inline void Node_Geometry_Material::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Material.name)
}
#endif
inline void Node_Geometry_Material::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Material.name)
}
inline void Node_Geometry_Material::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Material.name)
}
inline ::std::string* Node_Geometry_Material::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Material::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Material::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.name)
}

// float shininess = 2;
inline void Node_Geometry_Material::clear_shininess() {
  shininess_ = 0;
}
inline float Node_Geometry_Material::shininess() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.shininess)
  return shininess_;
}
inline void Node_Geometry_Material::set_shininess(float value) {
  
  shininess_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.shininess)
}

// float fresnel_exponent = 3;
inline void Node_Geometry_Material::clear_fresnel_exponent() {
  fresnel_exponent_ = 0;
}
inline float Node_Geometry_Material::fresnel_exponent() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.fresnel_exponent)
  return fresnel_exponent_;
}
inline void Node_Geometry_Material::set_fresnel_exponent(float value) {
  
  fresnel_exponent_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.fresnel_exponent)
}

// float transparency = 4;
inline void Node_Geometry_Material::clear_transparency() {
  transparency_ = 0;
}
inline float Node_Geometry_Material::transparency() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.transparency)
  return transparency_;
}
inline void Node_Geometry_Material::set_transparency(float value) {
  
  transparency_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.transparency)
}

// .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
inline void Node_Geometry_Material::clear_lighting_model() {
  lighting_model_ = 0;
}
inline ::viro::Node_Geometry_Material_LightingModel Node_Geometry_Material::lighting_model() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.lighting_model)
  return static_cast< ::viro::Node_Geometry_Material_LightingModel >(lighting_model_);
}
inline void Node_Geometry_Material::set_lighting_model(::viro::Node_Geometry_Material_LightingModel value) {
  
  lighting_model_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.lighting_model)
}

// bool lit_per_pixel = 6;
inline void Node_Geometry_Material::clear_lit_per_pixel() {
  lit_per_pixel_ = false;
}
inline bool Node_Geometry_Material::lit_per_pixel() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.lit_per_pixel)
  return lit_per_pixel_;
}
inline void Node_Geometry_Material::set_lit_per_pixel(bool value) {
  
  lit_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.lit_per_pixel)
}

// .viro.Node.Geometry.Material.CullMode cull_mode = 7;
inline void Node_Geometry_Material::clear_cull_mode() {
  cull_mode_ = 0;
}
inline ::viro::Node_Geometry_Material_CullMode Node_Geometry_Material::cull_mode() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.cull_mode)
  return static_cast< ::viro::Node_Geometry_Material_CullMode >(cull_mode_);
}
inline void Node_Geometry_Material::set_cull_mode(::viro::Node_Geometry_Material_CullMode value) {
  
  cull_mode_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.cull_mode)
}

// .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
inline void Node_Geometry_Material::clear_blend_mode() {
  blend_mode_ = 0;
}
inline ::viro::Node_Geometry_Material_BlendMode Node_Geometry_Material::blend_mode() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.blend_mode)
  return static_cast< ::viro::Node_Geometry_Material_BlendMode >(blend_mode_);
}
inline void Node_Geometry_Material::set_blend_mode(::viro::Node_Geometry_Material_BlendMode value) {
  
  blend_mode_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.blend_mode)
}

// bool reads_from_depth_buffer = 9;
inline void Node_Geometry_Material::clear_reads_from_depth_buffer() {
  reads_from_depth_buffer_ = false;
}
inline bool Node_Geometry_Material::reads_from_depth_buffer() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.reads_from_depth_buffer)
  return reads_from_depth_buffer_;
}
inline void Node_Geometry_Material::set_reads_from_depth_buffer(bool value) {
  
  reads_from_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.reads_from_depth_buffer)
}

// bool writes_to_depth_buffer = 10;
inline void Node_Geometry_Material::clear_writes_to_depth_buffer() {
  writes_to_depth_buffer_ = false;
}
inline bool Node_Geometry_Material::writes_to_depth_buffer() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.writes_to_depth_buffer)
  return writes_to_depth_buffer_;
}
inline void Node_Geometry_Material::set_writes_to_depth_buffer(bool value) {
  
  writes_to_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.writes_to_depth_buffer)
}

// repeated .viro.Node.Geometry.Material.Visual visual = 11;
inline int Node_Geometry_Material::visual_size() const {
  return visual_.size();
}
inline void Node_Geometry_Material::clear_visual() {
  visual_.Clear();
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::visual(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.visual)
  return visual_.Get(index);
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_visual(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.visual)
  return visual_.Mutable(index);
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::add_visual() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.visual)
  return visual_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material_Visual >*
Node_Geometry_Material::mutable_visual() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.visual)
  return &visual_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material_Visual >&
Node_Geometry_Material::visual() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.visual)
  return visual_;
}

// -------------------------------------------------------------------

// Node_Geometry

// string name = 1;
inline void Node_Geometry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.name)
  return name_.GetNoArena();
}
inline void Node_Geometry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.name)
}
#if LANG_CXX11
inline void Node_Geometry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.name)
}
#endif
inline void Node_Geometry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.name)
}
inline void Node_Geometry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.name)
}
inline ::std::string* Node_Geometry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.name)
}

// repeated .viro.Node.Geometry.Source source = 2;
inline int Node_Geometry::source_size() const {
  return source_.size();
}
inline void Node_Geometry::clear_source() {
  source_.Clear();
}
inline const ::viro::Node_Geometry_Source& Node_Geometry::source(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.source)
  return source_.Get(index);
}
inline ::viro::Node_Geometry_Source* Node_Geometry::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.source)
  return source_.Mutable(index);
}
inline ::viro::Node_Geometry_Source* Node_Geometry::add_source() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.source)
  return source_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >*
Node_Geometry::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.source)
  return &source_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >&
Node_Geometry::source() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.source)
  return source_;
}

// repeated .viro.Node.Geometry.Element element = 3;
inline int Node_Geometry::element_size() const {
  return element_.size();
}
inline void Node_Geometry::clear_element() {
  element_.Clear();
}
inline const ::viro::Node_Geometry_Element& Node_Geometry::element(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.element)
  return element_.Get(index);
}
inline ::viro::Node_Geometry_Element* Node_Geometry::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.element)
  return element_.Mutable(index);
}
inline ::viro::Node_Geometry_Element* Node_Geometry::add_element() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >*
Node_Geometry::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >&
Node_Geometry::element() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.element)
  return element_;
}

// repeated .viro.Node.Geometry.Material material = 4;
inline int Node_Geometry::material_size() const {
  return material_.size();
}
inline void Node_Geometry::clear_material() {
  material_.Clear();
}
inline const ::viro::Node_Geometry_Material& Node_Geometry::material(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.material)
  return material_.Get(index);
}
inline ::viro::Node_Geometry_Material* Node_Geometry::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.material)
  return material_.Mutable(index);
}
inline ::viro::Node_Geometry_Material* Node_Geometry::add_material() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.material)
  return material_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >*
Node_Geometry::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.material)
  return &material_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >&
Node_Geometry::material() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.material)
  return material_;
}

// -------------------------------------------------------------------

// Node_Light

// string name = 1;
inline void Node_Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Light::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.name)
  return name_.GetNoArena();
}
inline void Node_Light::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.name)
}
#if LANG_CXX11
inline void Node_Light::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Light.name)
}
#endif
inline void Node_Light::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Light.name)
}
inline void Node_Light::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Light.name)
}
inline ::std::string* Node_Light::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Light.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Light::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Light.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Light.name)
}

// .viro.Node.Light.LightType light_type = 2;
inline void Node_Light::clear_light_type() {
  light_type_ = 0;
}
inline ::viro::Node_Light_LightType Node_Light::light_type() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.light_type)
  return static_cast< ::viro::Node_Light_LightType >(light_type_);
}
inline void Node_Light::set_light_type(::viro::Node_Light_LightType value) {
  
  light_type_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.light_type)
}

// repeated float color = 3;
inline int Node_Light::color_size() const {
  return color_.size();
}
inline void Node_Light::clear_color() {
  color_.Clear();
}
inline float Node_Light::color(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.color)
  return color_.Get(index);
}
inline void Node_Light::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.color)
}
inline void Node_Light::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.color)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Light::color() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Light::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.color)
  return &color_;
}

// repeated float position = 4;
inline int Node_Light::position_size() const {
  return position_.size();
}
inline void Node_Light::clear_position() {
  position_.Clear();
}
inline float Node_Light::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.position)
  return position_.Get(index);
}
inline void Node_Light::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.position)
}
inline void Node_Light::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Light::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Light::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.position)
  return &position_;
}

// repeated float direction = 5;
inline int Node_Light::direction_size() const {
  return direction_.size();
}
inline void Node_Light::clear_direction() {
  direction_.Clear();
}
inline float Node_Light::direction(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.direction)
  return direction_.Get(index);
}
inline void Node_Light::set_direction(int index, float value) {
  direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.direction)
}
inline void Node_Light::add_direction(float value) {
  direction_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.direction)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Light::direction() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.direction)
  return direction_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Light::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.direction)
  return &direction_;
}

// float intensity = 6;
inline void Node_Light::clear_intensity() {
  intensity_ = 0;
}
inline float Node_Light::intensity() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.intensity)
  return intensity_;
}
inline void Node_Light::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.intensity)
}

// float temperature = 7;
inline void Node_Light::clear_temperature() {
  temperature_ = 0;
}
inline float Node_Light::temperature() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.temperature)
  return temperature_;
}
inline void Node_Light::set_temperature(float value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.temperature)
}

// float attenuation_start = 8;
inline void Node_Light::clear_attenuation_start() {
  attenuation_start_ = 0;
}
inline float Node_Light::attenuation_start() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_start)
  return attenuation_start_;
}
inline void Node_Light::set_attenuation_start(float value) {
  
  attenuation_start_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_start)
}

// float attenuation_end = 9;
inline void Node_Light::clear_attenuation_end() {
  attenuation_end_ = 0;
}
inline float Node_Light::attenuation_end() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_end)
  return attenuation_end_;
}
inline void Node_Light::set_attenuation_end(float value) {
  
  attenuation_end_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_end)
}

// float attenuation_falloff_exponent = 10;
inline void Node_Light::clear_attenuation_falloff_exponent() {
  attenuation_falloff_exponent_ = 0;
}
inline float Node_Light::attenuation_falloff_exponent() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_falloff_exponent)
  return attenuation_falloff_exponent_;
}
inline void Node_Light::set_attenuation_falloff_exponent(float value) {
  
  attenuation_falloff_exponent_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_falloff_exponent)
}

// float spot_inner_angle = 11;
inline void Node_Light::clear_spot_inner_angle() {
  spot_inner_angle_ = 0;
}
inline float Node_Light::spot_inner_angle() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.spot_inner_angle)
  return spot_inner_angle_;
}
inline void Node_Light::set_spot_inner_angle(float value) {
  
  spot_inner_angle_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.spot_inner_angle)
}

// float spot_outer_angle = 12;
inline void Node_Light::clear_spot_outer_angle() {
  spot_outer_angle_ = 0;
}
inline float Node_Light::spot_outer_angle() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.spot_outer_angle)
  return spot_outer_angle_;
}
inline void Node_Light::set_spot_outer_angle(float value) {
  
  spot_outer_angle_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.spot_outer_angle)
}

// -------------------------------------------------------------------

// Node_Camera

// repeated float position = 1;
inline int Node_Camera::position_size() const {
  return position_.size();
}
inline void Node_Camera::clear_position() {
  position_.Clear();
}
inline float Node_Camera::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Camera.position)
  return position_.Get(index);
}
inline void Node_Camera::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Camera.position)
}
inline void Node_Camera::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Camera.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Camera::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.Camera.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Camera::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Camera.position)
  return &position_;
}

// -------------------------------------------------------------------

// Node

// repeated float position = 1;
inline int Node::position_size() const {
  return position_.size();
}
inline void Node::clear_position() {
  position_.Clear();
}
inline float Node::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.position)
  return position_.Get(index);
}
inline void Node::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.position)
}
inline void Node::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Node::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Node::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.position)
  return &position_;
}

// repeated float scale = 2;
inline int Node::scale_size() const {
  return scale_.size();
}
inline void Node::clear_scale() {
  scale_.Clear();
}
inline float Node::scale(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.scale)
  return scale_.Get(index);
}
inline void Node::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.scale)
}
inline void Node::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.scale)
}
inline const ::google::protobuf::RepeatedField< float >&
Node::scale() const {
  // @@protoc_insertion_point(field_list:viro.Node.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedField< float >*
Node::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.scale)
  return &scale_;
}

// repeated float rotation = 3;
inline int Node::rotation_size() const {
  return rotation_.size();
}
inline void Node::clear_rotation() {
  rotation_.Clear();
}
inline float Node::rotation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.rotation)
  return rotation_.Get(index);
}
inline void Node::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.rotation)
}
inline void Node::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.rotation)
}
inline const ::google::protobuf::RepeatedField< float >&
Node::rotation() const {
  // @@protoc_insertion_point(field_list:viro.Node.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< float >*
Node::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.rotation)
  return &rotation_;
}

// int32 rendering_order = 4;
inline void Node::clear_rendering_order() {
  rendering_order_ = 0;
}
inline ::google::protobuf::int32 Node::rendering_order() const {
  // @@protoc_insertion_point(field_get:viro.Node.rendering_order)
  return rendering_order_;
}
inline void Node::set_rendering_order(::google::protobuf::int32 value) {
  
  rendering_order_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.rendering_order)
}

// float opacity = 5;
inline void Node::clear_opacity() {
  opacity_ = 0;
}
inline float Node::opacity() const {
  // @@protoc_insertion_point(field_get:viro.Node.opacity)
  return opacity_;
}
inline void Node::set_opacity(float value) {
  
  opacity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.opacity)
}

// .viro.Node.Geometry geometry = 6;
inline bool Node::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
inline void Node::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
inline const ::viro::Node_Geometry& Node::geometry() const {
  // @@protoc_insertion_point(field_get:viro.Node.geometry)
  return geometry_ != NULL ? *geometry_
                         : *::viro::Node_Geometry::internal_default_instance();
}
inline ::viro::Node_Geometry* Node::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::viro::Node_Geometry;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.geometry)
  return geometry_;
}
inline ::viro::Node_Geometry* Node::release_geometry() {
  // @@protoc_insertion_point(field_release:viro.Node.geometry)
  
  ::viro::Node_Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void Node::set_allocated_geometry(::viro::Node_Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.geometry)
}

// repeated .viro.Node.Light light = 7;
inline int Node::light_size() const {
  return light_.size();
}
inline void Node::clear_light() {
  light_.Clear();
}
inline const ::viro::Node_Light& Node::light(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.light)
  return light_.Get(index);
}
inline ::viro::Node_Light* Node::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.light)
  return light_.Mutable(index);
}
inline ::viro::Node_Light* Node::add_light() {
  // @@protoc_insertion_point(field_add:viro.Node.light)
  return light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >*
Node::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.light)
  return &light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >&
Node::light() const {
  // @@protoc_insertion_point(field_list:viro.Node.light)
  return light_;
}

// .viro.Node.Camera camera = 8;
inline bool Node::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
inline void Node::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
}
inline const ::viro::Node_Camera& Node::camera() const {
  // @@protoc_insertion_point(field_get:viro.Node.camera)
  return camera_ != NULL ? *camera_
                         : *::viro::Node_Camera::internal_default_instance();
}
inline ::viro::Node_Camera* Node::mutable_camera() {
  
  if (camera_ == NULL) {
    camera_ = new ::viro::Node_Camera;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.camera)
  return camera_;
}
inline ::viro::Node_Camera* Node::release_camera() {
  // @@protoc_insertion_point(field_release:viro.Node.camera)
  
  ::viro::Node_Camera* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void Node::set_allocated_camera(::viro::Node_Camera* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.camera)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace viro

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::viro::Node_Geometry_Source_Semantic> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Element_Primitive> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_Visual_WrapMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_Visual_FilterMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_LightingModel> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_CullMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_BlendMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Light_LightType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Nodes_2eproto__INCLUDED
